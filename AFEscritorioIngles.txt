UIImageView+AFNetworking.h
============================================================
Idioma: Objective-C
Licencia: otros

// UIImageView+AFNetworking.h
//
// Copyright (c) 2011 Gowalla (http://gowalla.com/)
//
// Permiso es por la presente otorga, gratuitamente, a cualquier persona obtener una copia
// de este software y archivos de la documentación asociada (el "Software"), para tratar
// en el Software sin restricciones, incluyendo sin limitación los derechos
// para usar, copiar, modificar, combinar, publicar, distribuir, otorgar una sublicencia, y/o vender
// copias del Software y para permitir a las personas a las que el Software es
// amueblado para hacerlo, sujeto a las siguientes condiciones:
//
// El aviso de copyright anterior y este aviso de permiso se incluirán en
// todas las copias o partes importantes del Software.
//
// EL SOFTWARE SE SUMINISTRA "TAL CUAL", SIN GARANTÍA DE CUALQUIER TIPO O EXPRESA
// IMPLÍCITAS, INCLUYENDO PERO NO LIMITADAS A, LAS GARANTÍAS DE COMERCIABILIDAD,
// APTITUD PARA UN PROPÓSITO PARTICULAR Y NO INFRACCIÓN.EN NINGÚN CASO LA
// AUTORES O LOS TITULARES DEL COPYRIGHT SERÁN RESPONSABLES DE CUALQUIER RECLAMACIÓN, DAÑOS U OTROS
// RESPONSABILIDAD, YA SEA EN UNA ACCIÓN DE RESPONSABILIDAD CONTRACTUAL, EXTRACONTRACTUAL O DE OTRO TIPO, QUE SE PRESENTA,
// DE O EN RELACIÓN CON EL SOFTWARE O EL USO U OTRAS OPERACIONES EN
// EL SOFTWARE.

#import<Foundation/Foundation.h>
#import"AFImageRequestOperation.h"

#import<Availability.h>

#if __IPHONE_OS_VERSION_MIN_REQUIRED
#import<UIKit/UIKit.h>

/**
Esta categoría añade métodos a la clase de 'UIImageView' de marco de UIKit.Los métodos en esta categoría ofrecen soporte para cargar imágenes remotas de forma asincrónica desde una dirección URL.
*/
@interfaceUIImageView (AFNetworking)

/**
Crea y cola una operación de petición de imagen que asincrónicamente descargas la imagen de la dirección URL especificada y establece la solicitud se acaba.Se cancelará cualquier solicitud de imagen anterior para el receptor.Si la imagen se almacena en caché localmente, la imagen se establece inmediatamente, de lo contrario la imagen del marcador de posición especificada se establecerá inmediatamente y luego la imagen remota se establecerá una vez finalizada la solicitud.

De forma predeterminada, peticiones de URL tienen una directiva de caché de 'NSURLCacheStorageAllowed' y un intervalo de tiempo de espera de 30 segundos y se establecen no mango cookies.Para configurar las peticiones URL diferente, utilice ' setImageWithURLRequest:placeholderImage:success:failure:'

@paramurl el URL que se utiliza para la solicitud de la imagen.
*/
- (vacío) setImageWithURL:(NSURL *) url;'

/**
Crea y cola una operación de petición de imagen que descargas asincrónicamente la imagen de la dirección URL especificada.Se cancelará cualquier solicitud de imagen anterior para el receptor.Si la imagen se almacena en caché localmente, la imagen se establece inmediatamente, de lo contrario la imagen del marcador de posición especificada se establecerá inmediatamente y luego la imagen remota se establecerá una vez finalizada la solicitud.

De forma predeterminada, peticiones de URL tienen una directiva de caché de 'NSURLCacheStorageAllowed' y un intervalo de tiempo de espera de 30 segundos y se establecen no mango cookies.Para configurar las peticiones URL diferente, utilice ' setImageWithURLRequest:placeholderImage:success:failure:'

@paramurl el URL que se utiliza para la solicitud de la imagen.
@paramplaceholderImage la imagen a establecerse inicialmente, hasta que termine la solicitud de la imagen.Si 'nada', la vista de la imagen no va a cambiar su imagen hasta que termine la solicitud de la imagen.
*/
- (vacío) setImageWithURL:(NSURL *) url
placeholderImage:(UIImage *) placeholderImage;'

/**
Crea y cola una operación de petición de imagen que descargas asincrónicamente la imagen con la dirección URL especificada solicita objeto.Se cancelará cualquier solicitud de imagen anterior para el receptor.Si la imagen se almacena en caché localmente, la imagen se establece inmediatamente, de lo contrario la imagen del marcador de posición especificada se establecerá inmediatamente y luego la imagen remota se establecerá una vez finalizada la solicitud.

Si se especifica un bloque de éxito, es la responsabilidad del bloque a la imagen de la vista de la imagen antes de regresar.Si no se especifica ningún bloque de éxito, el comportamiento predeterminado de ajuste de la imagen con ' self.image = imagen ' se ejecuta.

@parampetición de la URL de urlRequest utilizado para la solicitud de la imagen.
@paramplaceholderImage la imagen a establecerse inicialmente, hasta que termine la solicitud de la imagen.Si 'nada', la vista de la imagen no va a cambiar su imagen hasta que termine la solicitud de la imagen.
@parambloque de éxito Aa ejecutarse cuando la operación de la petición de imagen finaliza correctamente, con un código de estado en el rango de 2xx y con un tipo de contenido aceptable (por ejemplo "image/png").Este bloque no tiene ningún valor de retorno y toma tres argumentos: la petición enviada desde el cliente, la respuesta recibida del servidor y la imagen creada a partir de los datos de respuesta de la solicitud.Si la imagen se retorna desde la caché, los parámetros de solicitud y respuesta será 'nulo'.
@paramfalta A bloque objeto a ejecutarse cuando la operación de la petición de imagen termina sin éxito o finaliza correctamente.Este bloque no tiene ningún valor de retorno y toma tres argumentos: la petición enviada desde el cliente, la respuesta que recibió desde el servidor y el objeto de error describir la red o parsing error ocurrido.
*/
- (vacío) setImageWithURLRequest:(NSURLRequest *) urlRequest
placeholderImage:(UIImage *) placeholderImage
éxito: (vacío(^) (NSURLRequest * solicitar, NSHTTPURLResponse * respuesta, UIImage * imagen)) éxito
falta: (vacío(^) (NSURLRequest * solicitar, NSHTTPURLResponse * respuesta, NSError * error)) falta;'

/**
Cancela cualquier ejecución operación de petición de imagen para el receptor, si existe.
*/
- (vacío) cancelImageRequestOperation;'

@end

#endif




AFJSONRequestOperation.h
============================================================
Idioma: Objective-C
Licencia: otros

// AFJSONRequestOperation.h
//
// Copyright (c) 2011 Gowalla (http://gowalla.com/)
//
// Permiso es por la presente otorga, gratuitamente, a cualquier persona obtener una copia
// de este software y archivos de la documentación asociada (el "Software"), para tratar
// en el Software sin restricciones, incluyendo sin limitación los derechos
// para usar, copiar, modificar, combinar, publicar, distribuir, otorgar una sublicencia, y/o vender
// copias del Software y para permitir a las personas a las que el Software es
// amueblado para hacerlo, sujeto a las siguientes condiciones:
//
// El aviso de copyright anterior y este aviso de permiso se incluirán en
// todas las copias o partes importantes del Software.
//
// EL SOFTWARE SE SUMINISTRA "TAL CUAL", SIN GARANTÍA DE CUALQUIER TIPO O EXPRESA
// IMPLÍCITAS, INCLUYENDO PERO NO LIMITADAS A, LAS GARANTÍAS DE COMERCIABILIDAD,
// APTITUD PARA UN PROPÓSITO PARTICULAR Y NO INFRACCIÓN.EN NINGÚN CASO LA
// AUTORES O LOS TITULARES DEL COPYRIGHT SERÁN RESPONSABLES DE CUALQUIER RECLAMACIÓN, DAÑOS U OTROS
// RESPONSABILIDAD, YA SEA EN UNA ACCIÓN DE RESPONSABILIDAD CONTRACTUAL, EXTRACONTRACTUAL O DE OTRO TIPO, QUE SE PRESENTA,
// DE O EN RELACIÓN CON EL SOFTWARE O EL USO U OTRAS OPERACIONES EN
// EL SOFTWARE.

#import<Foundation/Foundation.h>
#import"AFHTTPRequestOperation.h"

/**
'AFJSONRequestOperation' es una subclase de 'AFHTTPRequestOperation' para descargar y trabajar con datos de respuesta JSON.

## Tipos de contenido aceptables

De forma predeterminada, 'AFJSONRequestOperation' acepta los siguientes tipos MIME, que incluye la norma oficial, 'aplicación/json', así como otros tipos habituales:

-'aplicación/json'
-'texto/json'

@warningJSON análisis utilizará la clase 'NSJSONSerialization' incorporado
*/
@interfaceAFJSONRequestOperation: AFHTTPRequestOperation

///----------------------------
///@nameObtener datos de respuesta
///----------------------------

/**
Un objeto JSON construido a partir de los datos de respuesta.Si se produce un error mientras que análisis, 'nada' se devolverán, y establecerá la propiedad de "error" en el error.
*/
' @property('readonly', 'o', 'fuerte')IDresponseJSON;'

/**
Opciones para leer la respuesta de datos JSON y crear los objetos de la Fundación.Para los valores posibles, vea la sección de documentación de "NSJSONSerialization" "NSJSONReadingOptions".
*/
' @property()'o',asignar) NSJSONReadingOptions JSONReadingOptions;'

///----------------------------------
///@nameCrear solicitud de operaciones
///----------------------------------

/**
Crea y devuelve un objeto 'AFJSONRequestOperation' y establece las devoluciones de llamadas de éxito y el fracaso especificados.

@paramurlRequest objeto request a cargarse de forma asincrónica durante la ejecución de la operación
@paramobjeto de bloque de éxito A ejecutarse cuando la operación finalice con éxito.Este bloque no tiene ningún valor de retorno y toma tres argumentos: el objeto JSON creado a partir de los datos de respuesta de la solicitud, la petición enviada desde el cliente y la respuesta recibida del servidor.
@paramfalta A bloque objeto a ejecutarse cuando la operación termina sin éxito, o termina con éxito, pero detectó un error al analizar los datos de respuesta como JSON.Este bloque no tiene ningún valor de retorno y toma tres argumentos: la petición enviada desde el cliente, la respuesta que recibió desde el servidor y el error que describe la red o parsing error ocurrido.

@returnUna nueva operación de solicitud JSON
*/
+ (instancetype) JSONRequestOperationWithRequest:(NSURLRequest *) urlRequest
éxito: (vacío(^) (NSURLRequest * solicitar, NSHTTPURLResponse * respuesta,idJSON)) éxito
falta: (vacío(^) (NSURLRequest * solicitar, NSHTTPURLResponse * respuesta, NSError * error,idJSON)) falta;'

@end




AFPropertyListRequestOperation.h
============================================================
Idioma: Objective-C
Licencia: otros

// AFPropertyListRequestOperation.h
//
// Copyright (c) 2011 Gowalla (http://gowalla.com/)
//
// Permiso es por la presente otorga, gratuitamente, a cualquier persona obtener una copia
// de este software y archivos de la documentación asociada (el "Software"), para tratar
// en el Software sin restricciones, incluyendo sin limitación los derechos
// para usar, copiar, modificar, combinar, publicar, distribuir, otorgar una sublicencia, y/o vender
// copias del Software y para permitir a las personas a las que el Software es
// amueblado para hacerlo, sujeto a las siguientes condiciones:
//
// El aviso de copyright anterior y este aviso de permiso se incluirán en
// todas las copias o partes importantes del Software.
//
// EL SOFTWARE SE SUMINISTRA "TAL CUAL", SIN GARANTÍA DE CUALQUIER TIPO O EXPRESA
// IMPLÍCITAS, INCLUYENDO PERO NO LIMITADAS A, LAS GARANTÍAS DE COMERCIABILIDAD,
// APTITUD PARA UN PROPÓSITO PARTICULAR Y NO INFRACCIÓN.EN NINGÚN CASO LA
// AUTORES O LOS TITULARES DEL COPYRIGHT SERÁN RESPONSABLES DE CUALQUIER RECLAMACIÓN, DAÑOS U OTROS
// RESPONSABILIDAD, YA SEA EN UNA ACCIÓN DE RESPONSABILIDAD CONTRACTUAL, EXTRACONTRACTUAL O DE OTRO TIPO, QUE SE PRESENTA,
// DE O EN RELACIÓN CON EL SOFTWARE O EL USO U OTRAS OPERACIONES EN
// EL SOFTWARE.

#import<Foundation/Foundation.h>
#import"AFHTTPRequestOperation.h"

/**
'AFPropertyListRequestOperation' es una subclase de 'AFHTTPRequestOperation' para descargar y deserializar objetos con datos de la respuesta característica lista (plist).

## Tipos de contenido aceptables

De forma predeterminada, el 'AFPropertyListRequestOperation' acepta los siguientes tipos MIME:

-'aplicación/x-plist'
*/
@interfaceAFPropertyListRequestOperation: AFHTTPRequestOperation

///----------------------------
///@nameObtener datos de respuesta
///----------------------------

/**
Un objeto deserializado desde un plist construido utilizando los datos de respuesta.
*/
' @property('readonly', 'o')IDresponsePropertyList;'

///--------------------------------------
///@nameGestión de comportamiento de la lista de propiedad
///--------------------------------------

/**
Una de las opciones de 'NSPropertyListMutabilityOptions', especificando la mutabilidad de deserializar de la lista de propiedades de objetos.De forma predeterminada, es 'NSPropertyListImmutable'.
*/
' @property()'o',asignar) NSPropertyListReadOptions propertyListReadOptions;'

/**
Crea y devuelve un objeto 'AFPropertyListRequestOperation' y establece las devoluciones de llamadas de éxito y el fracaso especificados.

@paramurlRequest objeto request a cargarse de forma asincrónica durante la ejecución de la operación
@paramobjeto de bloque de éxito A ejecutarse cuando la operación finalice con éxito.Este bloque no tiene ningún valor de retorno y toma tres argumentos: el objeto deserializado desde un plist construido utilizando los datos de respuesta, la petición enviada desde el cliente y la respuesta recibida del servidor.
@paramfalta A bloque objeto a ejecutarse cuando la operación termina sin éxito, o termina con éxito, pero ha encontrado un error al deserializar el objeto de una lista de propiedades.Este bloque no tiene ningún valor de retorno y toma tres argumentos: la petición enviada desde el cliente, la respuesta que recibió desde el servidor y el error que describe la red o parsing error ocurrido.

@returnUna nueva operación de solicitud de lista de propiedad
*/
+ (instancetype) propertyListRequestOperationWithRequest:(NSURLRequest *) urlRequest
éxito: (vacío(^) (NSURLRequest * solicitar, NSHTTPURLResponse * respuesta,idlistaDePropiedades)) éxito
error: (vacío(^) (NSURLRequest * solicitar, NSHTTPURLResponse * respuesta, NSError * error,idlistaDePropiedades)) falta;'

@end




AFURLConnectionOperation.h
============================================================
Idioma: Objective-C
Licencia: otros

// AFURLConnectionOperation.h
//
// Copyright (c) 2011 Gowalla (http://gowalla.com/)
//
// Permiso es por la presente otorga, gratuitamente, a cualquier persona obtener una copia
// de este software y archivos de la documentación asociada (el "Software"), para tratar
// en el Software sin restricciones, incluyendo sin limitación los derechos
// para usar, copiar, modificar, combinar, publicar, distribuir, otorgar una sublicencia, y/o vender
// copias del Software y para permitir a las personas a las que el Software es
// amueblado para hacerlo, sujeto a las siguientes condiciones:
//
// El aviso de copyright anterior y este aviso de permiso se incluirán en
// todas las copias o partes importantes del Software.
//
// EL SOFTWARE SE SUMINISTRA "TAL CUAL", SIN GARANTÍA DE CUALQUIER TIPO O EXPRESA
// IMPLÍCITAS, INCLUYENDO PERO NO LIMITADAS A, LAS GARANTÍAS DE COMERCIABILIDAD,
// APTITUD PARA UN PROPÓSITO PARTICULAR Y NO INFRACCIÓN.EN NINGÚN CASO LA
// AUTORES O LOS TITULARES DEL COPYRIGHT SERÁN RESPONSABLES DE CUALQUIER RECLAMACIÓN, DAÑOS U OTROS
// RESPONSABILIDAD, YA SEA EN UNA ACCIÓN DE RESPONSABILIDAD CONTRACTUAL, EXTRACONTRACTUAL O DE OTRO TIPO, QUE SE PRESENTA,
// DE O EN RELACIÓN CON EL SOFTWARE O EL USO U OTRAS OPERACIONES EN
// EL SOFTWARE.

#import<Foundation/Foundation.h>

#import<Availability.h>

/**
'AFURLConnectionOperation' es una subclase de 'NSOperation' que implementa los métodos de delegado de 'NSURLConnection'.

## Información sobre la creación de subclases

Esta es la clase base de todas las operaciones de solicitud de la red.Puedes crear tu propia subclase para implementar métodos adicionales de delegado de 'NSURLConnection' (véase "Métodos de delegado de 'NSURLConnection'"), o para proporcionar propiedades adicionales o constructores de clase.

Si va a crear una subclase que se comunica a través de los protocolos HTTP o HTTPS, puede considerar crear subclases de 'AFHTTPRequestOperation' en lugar de ello, ya que soporta la especificación de tipos de contenido aceptables o códigos de estado.

## NSURLConnection delegado métodos

'AFURLConnectionOperation' implementa los siguientes métodos de delegado de 'NSURLConnection':

-' conexión: didReceiveResponse:'
-' conexión: didReceiveData:'
-' connectionDidFinishLoading:'
-' conexión: didFailWithError:'
-' conexión: didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:'
-' conexión: willCacheResponse:'
-' conexión: canAuthenticateAgainstProtectionSpace:'
-' conexión: didReceiveAuthenticationChallenge:'
-' connectionShouldUseCredentialStorage:'
-' conexión: needNewBodyStream:'

Si cualquiera de estos métodos son reemplazada en una subclase, _must_ llamar a la implementación de 'súper' primero.

## Constructores de clase

Constructores de clase o métodos que devuelven una instancia nadie, son la forma preferida de subclases encapsular cualquier lógica particular para manejar la configuración o análisis de datos de respuesta.Por ejemplo, 'AFJSONRequestOperation' ofrece ' JSONRequestOperationWithRequest:success:failure:', que lleva bloquea argumentos, cuyo parámetro para una solicitud exitosa es el objeto JSON inicializado de los datos de la respuesta.

## Las devoluciones de llamada y bloques de terminación

El built-in 'completionBlock' de 'NSOperation' permite un comportamiento personalizado a ejecutarse después de que termine la solicitud.Es un patrón común para constructores de la clase en subclases parámetros del bloque de devolución de llamada, y ejecutarlas condicional en el cuerpo de su 'completionBlock'.Asegúrese de manejar operaciones canceladas apropiadamente al establecer un 'completionBlock' (es decir, regresar temprano antes de analizar los datos de respuesta).Ver la aplicación de cualquiera de las subclases de 'AFHTTPRequestOperation' para obtener un ejemplo de esto.

Las subclases son ' strong'ly desalentado de reemplazar ' setCompletionBlock:', como ' AFURLConnectionOperation'' implementación s incluye una solución para mitigar mantener ciclos, y lo que Apple algo inquietante denomina ["el problema de la desafectación"] (http://developer.apple.com/library/ios/#technotes/tn2109/).

## SSL de clavos

Basándose en el modelo de la confianza de CA para validar certificados SSL expone su aplicación a las vulnerabilidades de seguridad, tales como ataques man in the middle.Para aplicaciones que se conectan a servidores conocidos, fijación de certificado SSL proporciona un mayor nivel de seguridad, comprobando la validez del certificado de servidor contra los especificados en el paquete de la aplicación.

SSL con certificado de clavos es ' strong'ly recomendado para cualquier aplicación que transmite información confidencial a un webservice externo.

Cuando se define '_AFNETWORKING_PIN_SSL_CERTIFICATES_' y el marco de la seguridad está ligado, las conexiones serán validadas en todos los certificados correspondientes con la extensión ".cer" en la raíz del paquete.

## NSCoding & conformidad de Nscopying

'AFURLConnectionOperation' se ajusta a los protocolos de la 'NSCoding' y 'NSCopying', que permite operaciones archiva en disco, y copiar en memoria, respectivamente.Sin embargo, debido a las limitaciones intrínsecas de capturar el estado exacto de una operación en un momento determinado, hay algunas advertencias importantes a tener en cuenta:

### NSCoding advertencias

-Operaciones codificadas no incluyen propiedades de bloque o secuencia.Asegúrese de fijar cualquier bloques de devolución de llamada, 'completionBlock' y 'outputStream' según sea necesario cuando se utiliza '-initWithCoder:' o 'NSKeyedUnarchiver'.
-Las operaciones se detuvo en ' encodeWithCoder:'.Si la operación fue codificada mientras pausado o aún en ejecución, su estado archivado volverá 'Sí' para 'isReady'.De lo contrario, el estado de una operación al codificar permanecerán invariable.

### NSCopying advertencias

-'-copia ' y '-copyWithZone:' volver a una nueva operación con el 'NSURLRequest' del original.Así que en lugar de una copia exacta de la operación en ese instante particular, el mecanismo de copiado devuelve una instancia completamente nueva, que puede ser útil para volver a intentar ejecutar operaciones.
-Una copia de una operación no incluirá el 'outputStream' del original.
-Operación copias no incluyen 'completionBlock'.'completionBlock' a menudo ' strong'ly captura una referencia a 'uno mismo', que de lo contrario tendría el efecto secundario intuitivo de señalar a la operación de Wisin cuando copia.
*/

#ifdef _AFNETWORKING_PIN_SSL_CERTIFICATES_
TypeDefenum{
AFSSLPinningModeNone,
AFSSLPinningModePublicKey,
AFSSLPinningModeCertificate,
} AFURLConnectionOperationSSLPinningMode;'
#endif

@interfaceAFURLConnectionOperation: NSOperation < NSURLConnectionDelegate,
#if (defined(__IPHONE_OS_VERSION_MIN_REQUIRED) & & __IPHONE_OS_VERSION_MIN_REQUIRED > =50000) || \
(defined(__MAC_OS_X_VERSION_MIN_REQUIRED) & & __MAC_OS_X_VERSION_MIN_REQUIRED > =1080)
NSURLConnectionDataDelegate,
#endif
NSCoding, NSCopying >

///-------------------------------
///@nameRun acceder a modos de bucle
///-------------------------------

/**
Los modos de ejecución del bucle en el que la operación se ejecutará en el hilo de la red.De forma predeterminada, se trata de un sistema uninominal con 'NSRunLoopCommonModes'.
*/
' @property()'o','fuerte') NSSet * runLoopModes;'

///-----------------------------------------
///@nameObtener información de conexión de URL
///-----------------------------------------

/**
La solicitud utilizada por la conexión de la operación.
*/
' @property()'readonly','o','fuerte') NSURLRequest * solicitar;'

/**
La última respuesta que recibió por la conexión de la operación.
*/
' @property()'readonly','o','fuerte') NSURLResponse * respuesta;'

/**
El error, si los hubiere, ocurrió en el ciclo de vida de la solicitud.
*/
' @property()'readonly','o','fuerte') NSError * error;'

/**
Si la conexión debe aceptar un certificado SSL no válido.

Si es '_AFNETWORKING_ALLOW_INVALID_SSL_CERTIFICATES_', esta propiedad por defecto para el "Sí" para atrás compatibilidad.De lo contrario, esta propiedad por defecto 'NO'.
*/
' @property()'o',asignar)BOOLallowsInvalidSSLCertificate;'

///----------------------------
///@nameObtener datos de respuesta
///----------------------------

/**
Los datos recibidos durante la solicitud.
*/
' @property()'readonly','o','fuerte') NSData * responseData;'

/**
La representación de cadena de los datos de respuesta.
*/
' @property()'readonly','o',copia) NSString * responseString;'

/**
La codificación de cadena de la respuesta.

Si la respuesta no especifica la codificación de una cadena válida, 'responseStringEncoding' volverá 'NSUTF8StringEncoding'.
*/
' @property()'readonly','o',asignar) NSStringEncoding responseStringEncoding;'

///-------------------------------
///@nameGestión de credenciales de URL
///-------------------------------

/**
Si la conexión de la URL debe consultar el almacenamiento de credenciales para autenticar la conexión."Sí" por defecto.

Este es el valor que se devuelve en el método 'NSURLConnectionDelegate' '-connectionShouldUseCredentialStorage:'.
*/
' @property()'o',asignar)BOOLshouldUseCredentialStorage;'

/**
La credencial que se utiliza para los desafíos de autenticación en '-conexión: didReceiveAuthenticationChallenge:'.

Esto será reemplazado por ninguna credencial compartida que existen para el nombre de usuario o contraseña de la URL de la solicitud, si está presente.
*/
' @property()'o','fuerte') NSURLCredential * credencial;'

/**
El modo de fijación que se utilizará para conexiones SSL.'AFSSLPinningModePublicKey' de forma predeterminada.

Para habilitar el SSL de clavos, '#define _AFNETWORKING_PIN_SSL_CERTIFICATES_' en 'Prefix.pch'.Además, asegúrese de que el marco de la seguridad está vinculado con el binario.Consulte la sección "SSL Pinning" en el 'AFURLConnectionOperation' "encabezado para obtener más información.
*/
#ifdef _AFNETWORKING_PIN_SSL_CERTIFICATES_
' @property()'o',asignar) AFURLConnectionOperationSSLPinningMode SSLPinningMode;'
#endif

///------------------------
///@nameAcceso a corrientes
///------------------------

/**
La secuencia de entrada para leer los datos que se enviarán durante la solicitud.

Esta propiedad actúa como un proxy para la propiedad 'HTTPBodyStream' de 'solicitud'.
*/
' @property()'o','fuerte') NSInputStream * inputStream;'

/**
El flujo de salida que se utiliza para escribir los datos recibidos hasta que termine la solicitud.

Por defecto, los datos se acumulan en un búfer que se almacena en 'responseData' al completar la solicitud.Cuando se establece 'outputStream', los datos no se acumularán en un búfer interno, y como resultado, la propiedad 'responseData' de la solicitud completa será 'nulo'.El flujo de salida se programará en el runloop de hilo de red se establezca.
*/
' @property()'o','fuerte') NSOutputStream * outputStream;'

///---------------------------------------------
///@nameAdministrar la información de la operación de solicitud
///---------------------------------------------

/**
El Diccionario de la información del usuario para el receptor.
*/
' @property()'o','fuerte') NSDictionary * userInfo;'

///------------------------------------------------------
///@nameInicializar un objeto AFURLConnectionOperation
///------------------------------------------------------

/**
Inicializa y devuelve un objeto de la operación recién asignado con una conexión de enlace configurada con la petición de la url especificada.

Este es el inicializador designado.

@paramel objeto de la solicitud para ser utilizado por la conexión de la operación de urlRequest.
*/
- (ID) initWithRequest:(NSURLRequest *) urlRequest;'

///----------------------------------
///@namePausar / reanudar las solicitudes
///----------------------------------

/**
Se detiene la ejecución de la operación de la solicitud.

Una pausa Operación devuelve 'NO' para '-isReady', '-isExecuting', y '-isFinished'.Por lo tanto, permanecerá en un 'NSOperationQueue' hasta que está cancelada o reanudado.Una pausa de una operación de acabado, cancelada o en pausa no tiene ningún efecto.
*/
- (vacío) pausa;'

/**
Si la operación de solicitud está en pausa.

@return"Sí" si la operación actualmente está en pausa, lo contrario 'NO'.
*/
- (BOOL) isPaused;'

/**
Se reanuda la ejecución de la operación de solicitud pausado.

Pausar/reanudar comportamiento varía dependiendo de la implementación subyacente para la clase de operación.En su implementación base, reanudando un reinicio pide pausa la solicitud original.Sin embargo, puesto que HTTP define una especificación de cómo solicitar un rango de contenido específico, 'AFHTTPRequestOperation' volverá a descargar la solicitud desde donde se quedó, en lugar de reiniciar la solicitud original.
*/
- (vacío) reanudar;'

///----------------------------------------------
///@nameConfigurar el comportamiento de tarea segundo plano
///----------------------------------------------

/**
Especifica que la operación debe continuar la ejecución después de la aplicación ha entrado en el fondo y el manejador de vencimiento para esa tarea en segundo plano.

@paramcontrolador de controlador A llamarse poco antes de tiempo restante de fondo de la aplicación llegue a 0.El controlador se envuelve en un bloque que cancela la operación y limpia y marca el final de la ejecución, a diferencia del parámetro 'controlador' en ' UIApplication - beginBackgroundTaskWithExpirationHandler:', que espera a realizarse en el controlador de sí mismo.Se llama al controlador síncrono en el subproceso principal, bloqueando así la suspensión de la aplicación momentáneamente, mientras que la aplicación sea notificada.
*/
#if defined(__IPHONE_OS_VERSION_MIN_REQUIRED)
- (vacío) setShouldExecuteAsBackgroundTaskWithExpirationHandler: (vacío(^)(void)) controlador;'
#endif

///---------------------------------
///@nameDevoluciones de llamada progreso de ajuste
///---------------------------------

/**
Fija un callback para llamarse cuando un número indeterminado de bytes se han subido al servidor.

@paramobjeto que se llamará cuando un número indeterminado de bytes se han cargado en el servidor enbloque A bloque.Este bloque no tiene ningún valor de retorno y toma tres argumentos: el número de bytes escritos desde la última vez que el bloque de progreso de carga fue llamado, el total de bytes escrito, y el total de bytes debe escribirse durante la solicitud, como inicialmente determinada por la longitud del cuerpo HTTP.Este bloque puede llamar varias veces y se ejecuta en el subproceso principal.
*/
- (vacío) setUploadProgressBlock: (vacío(^) (NSUInteger bytesWritten,largolargodeltotalBytesWritten,largolargototalBytesExpectedToWrite)) block;'

/**
Fija un callback para llamarse cuando un número indeterminado de bytes se han descargado en el servidor.

@paramobjeto que se llamará cuando un número indeterminado de bytes se han descargado el servidor enbloque A bloque.Este bloque no tiene ningún valor de retorno y toma tres argumentos: el número de bytes leídos desde la última vez que el bloque de progreso de la descarga fue llamado, leer los bytes totales y el total de bytes que leer durante la solicitud, como inicialmente determinada por el tamaño del contenido esperado del objeto 'NSHTTPURLResponse'.Este bloque puede llamar varias veces y se ejecuta en el subproceso principal.
*/
- (vacío) setDownloadProgressBlock: (vacío(^) (BytesRead NSUInteger,largolargodeltotalBytesRead,largolargototalBytesExpectedToRead)) block;'

///-------------------------------------------------
///@nameDevoluciones de llamada NSURLConnection delegado de ajuste
///-------------------------------------------------

/**
Establece un bloque a ser ejecutados para determinar si la conexión debe ser capaz de responder a la forma de un espacio de protección de autenticación, como por el método 'NSURLConnectionDelegate' ' conexión: canAuthenticateAgainstProtectionSpace:'.

@paramobjeto a ser ejecutados para determinar si la conexión debe ser capaz de responder a la forma de un espacio de protección de autenticación enbloque A bloque.El bloque tiene un 'BOOL' tipo de valor devuelto y toma dos argumentos: el objeto de conexión de la URL y el espacio de protección para autenticar contra.

Si 'allowsInvalidSSLCertificate' está establecida en sí, ' conexión: canAuthenticateAgainstProtectionSpace:' aceptará no válidos certificados SSL, regresando "Sí" si el método de autenticación de protección espacio es 'NSURLAuthenticationMethodServerTrust'.
*/
- (vacío) setAuthenticationAgainstProtectionSpaceBlock: (BOOL(^) (NSURLConnection * conexión, NSURLProtectionSpace * protectionSpace)) block;'

/**
Establece un bloque a ejecutarse cuando la conexión debe autenticarse en un reto para descargar su solicitud, como por el método 'NSURLConnectionDelegate' ' conexión: didReceiveAuthenticationChallenge:'.

@paramobjeto a ejecutarse cuando la conexión debe autenticar un reto para descargar su solicitud enbloque A bloque.El bloque no tiene ningún tipo de retorno y toma dos argumentos: el objeto de conexión de la URL y el desafío que deben autenticarse.

Si 'allowsInvalidSSLCertificate' está establecida en sí, ' conexión: didReceiveAuthenticationChallenge:' intentará que el remitente de desafío utilizar credenciales con certificados SSL no válidos.
*/
- (vacío) setAuthenticationChallengeBlock: (vacío(^) (NSURLConnection * conexión, NSURLAuthenticationChallenge * desafío)) block;'

/**
Establece un bloqueo para ejecutarse cuando el servidor redirige la petición de un URL a otra URL, o cuando la solicitud URL cambia por la subclase de 'NSURLProtocol' que controla la solicitud con el fin de estandarizar su formato, como por el método 'NSURLConnectionDelegate' ' conexión: willSendRequest:redirectResponse:'.

@paramobjeto a ejecutarse cuando se cambió la dirección URL de la solicitud enbloque A bloque.El bloque devuelve un objeto 'NSURLRequest', la solicitud de URL redirect y toma tres argumentos: el objeto de conexión de la URL, el redirigido la solicitud y la respuesta de URL que causó la redirección.
*/
- (vacío) setRedirectResponseBlock: (NSURLRequest * (^) (NSURLConnection * conexión, NSURLRequest * solicitar, NSURLResponse * redirectResponse)) block;'


/**
Establece un bloqueo para ejecutarse para modificar la respuesta que se almacenará en caché una conexión, si los hubiere, que controla el método 'NSURLConnectionDelegate' ' conexión: willCacheResponse:'.

@parambloque un objeto del bloque a ser ejecutados para determinar qué respuesta se cachea una conexión, si cualquier.El bloque devuelve un objeto 'NSCachedURLResponse', la respuesta almacenada en caché para almacenar en memoria o 'nada' para que la respuesta de se almacena en caché y toma dos argumentos: el objeto de conexión de enlace y la respuesta almacenada en caché para la solicitud.
*/
- (vacío) setCacheResponseBlock: (NSCachedURLResponse * (^) (NSURLConnection * conexión, NSCachedURLResponse * cachedResponse)) block;'

@end

///----------------
///@nameConstantes
///----------------

/**
## Opciones de fijación SSL

Las siguientes constantes son proporcionadas por 'AFURLConnectionOperation' como posibles opciones SSL de clavos.

enum {}
AFSSLPinningModeNone,
AFSSLPinningModePublicKey,
AFSSLPinningModeCertificate,
}

'AFSSLPinningModeNone'
No no las conexiones SSL de pin

'AFSSLPinningModePublicKey'
Perno conexiones SSL certificado de clave pública (SPKI).

'AFSSLPinningModeCertificate'
Perno conexiones SSL certificado exacto.Esto puede causar problemas cuando su certificado expira y necesita re-emisión.

## Claves de Diccionario de información usuario

Estas teclas pueden existir en el Diccionario de la información del usuario, además de las definidas para NSError.

-' NSString * const AFNetworkingOperationFailingURLRequestErrorKey'
-' NSString * const AFNetworkingOperationFailingURLResponseErrorKey'

### Constantes

'AFNetworkingOperationFailingURLRequestErrorKey'
El valor correspondiente es un 'NSURLRequest' que contiene la solicitud de la operación asociada a un error.Este botón sólo está presente en la 'AFNetworkingErrorDomain'.

'AFNetworkingOperationFailingURLResponseErrorKey'
El valor correspondiente es un 'NSURLResponse' que contiene la respuesta de la operación asociada a un error.Este botón sólo está presente en la 'AFNetworkingErrorDomain'.

## Error dominios

El siguiente dominio de error está predefinido.

-' NSString * const AFNetworkingErrorDomain'

### Constantes

'AFNetworkingErrorDomain'
AFNetworking errores.Códigos de error para 'AFNetworkingErrorDomain' corresponden a los códigos en 'NSURLErrorDomain'.
*/
externNSString *constAFNetworkingErrorDomain;'
externNSString *constAFNetworkingOperationFailingURLRequestErrorKey;'
externNSString *constAFNetworkingOperationFailingURLResponseErrorKey;'

///--------------------
///@nameNotificaciones
///--------------------

/**
Publicada cuando comienza a ejecutar una operación.
*/
externNSString *constAFNetworkingOperationDidStartNotification;'

/**
Publicada cuando finaliza una operación.
*/
externNSString *constAFNetworkingOperationDidFinishNotification;'




AFImageRequestOperation.h
============================================================
Idioma: Objective-C
Licencia: otros

// AFImageRequestOperation.h
//
// Copyright (c) 2011 Gowalla (http://gowalla.com/)
//
// Permiso es por la presente otorga, gratuitamente, a cualquier persona obtener una copia
// de este software y archivos de la documentación asociada (el "Software"), para tratar
// en el Software sin restricciones, incluyendo sin limitación los derechos
// para usar, copiar, modificar, combinar, publicar, distribuir, otorgar una sublicencia, y/o vender
// copias del Software y para permitir a las personas a las que el Software es
// amueblado para hacerlo, sujeto a las siguientes condiciones:
//
// El aviso de copyright anterior y este aviso de permiso se incluirán en
// todas las copias o partes importantes del Software.
//
// EL SOFTWARE SE SUMINISTRA "TAL CUAL", SIN GARANTÍA DE CUALQUIER TIPO O EXPRESA
// IMPLÍCITAS, INCLUYENDO PERO NO LIMITADAS A, LAS GARANTÍAS DE COMERCIABILIDAD,
// APTITUD PARA UN PROPÓSITO PARTICULAR Y NO INFRACCIÓN.EN NINGÚN CASO LA
// AUTORES O LOS TITULARES DEL COPYRIGHT SERÁN RESPONSABLES DE CUALQUIER RECLAMACIÓN, DAÑOS U OTROS
// RESPONSABILIDAD, YA SEA EN UNA ACCIÓN DE RESPONSABILIDAD CONTRACTUAL, EXTRACONTRACTUAL O DE OTRO TIPO, QUE SE PRESENTA,
// DE O EN RELACIÓN CON EL SOFTWARE O EL USO U OTRAS OPERACIONES EN
// EL SOFTWARE.

#import<Foundation/Foundation.h>
#import"AFHTTPRequestOperation.h"

#import<Availability.h>

#if defined(__IPHONE_OS_VERSION_MIN_REQUIRED)
#import<UIKit/UIKit.h>
#elif defined(__MAC_OS_X_VERSION_MIN_REQUIRED)
#import<Cocoa/Cocoa.h>
#endif

/**
'AFImageRequestOperation' es una subclase de 'AFHTTPRequestOperation' para la descarga de un procesamiento de imágenes.

## Tipos de contenido aceptables

De forma predeterminada, el 'AFImageRequestOperation' acepta los siguientes tipos MIME, que corresponden a los formatos de imagen soportados por UIImage o NSImage:

-'imagen/tiff'
-'image/jpeg'
-"image/gif"
-"image/png"
-'imagen/ico'
-'image/x-icon'
-'imagen/bmp'
-'image/x-bmp'
-'image/x-xbitmap'
-'image/x-win-bits'
*/
@interfaceAFImageRequestOperation: AFHTTPRequestOperation

/**
Una imagen construida a partir de los datos de respuesta.Si se produce un error durante la solicitud, 'nada' se devolverán, y establecerá la propiedad de "error" en el error.
*/
#if defined(__IPHONE_OS_VERSION_MIN_REQUIRED)
' @property('readonly', 'o', 'fuerte') UIImage * responseImage;'
#elif defined(__MAC_OS_X_VERSION_MIN_REQUIRED)
' @property()'readonly','o','fuerte') NSImage * responseImage;'
#endif

#if defined(__IPHONE_OS_VERSION_MIN_REQUIRED)
/**
El factor de escala utilizado al interpretar los datos de imagen para construir 'responseImage'.Especifica un factor de escala de resultados 1.0 en una imagen cuyo tamaño coincide con las dimensiones basadas en píxeles de la imagen.Aplicando un factor de escala diferente cambia el tamaño de la imagen según lo informado por la propiedad size.Esto se establece en el valor de escala de la pantalla principal de manera predeterminada, que escala automáticamente imágenes para las exhibiciones de la retina, por ejemplo.
*/
' @property()'o',asignar) CGFloat imageScale;'
#endif

/**
Crea y devuelve un objeto 'AFImageRequestOperation' y establece la devolución de llamada especificado éxito.

@paramel objeto de la solicitud para ser cargado de forma asincrónica durante la ejecución de la operación de urlRequest.
@paramobjeto de bloque de éxito A ejecutarse cuando la solicitud finaliza correctamente.Este bloque no tiene ningún valor de retorno y toma un solo argumento, la imagen creada a partir de los datos de respuesta de la solicitud.

@returnUna nueva operación de petición de imagen
*/
#if defined(__IPHONE_OS_VERSION_MIN_REQUIRED)
+ (instancetype) imageRequestOperationWithRequest:(NSURLRequest *) urlRequest
éxito: (vacío(^) (UIImage * imagen)) éxito;'
#elif defined(__MAC_OS_X_VERSION_MIN_REQUIRED)
+ (instancetype) imageRequestOperationWithRequest:(NSURLRequest *) urlRequest
éxito: (vacío(^) (NSImage * imagen)) éxito;'
#endif

/**
Crea y devuelve un objeto 'AFImageRequestOperation' y establece la devolución de llamada especificado éxito.

@paramel objeto de la solicitud para ser cargado de forma asincrónica durante la ejecución de la operación de urlRequest.
@paramimageProcessingBlock un objeto de bloque para ejecutarse después de la solicitud de la imagen finaliza correctamente, pero antes de que la imagen se devuelve en el bloque de "éxito".Este bloque toma un único argumento, la imagen que se cargan desde el cuerpo de la respuesta y devuelve la imagen procesada.
@paramobjeto de bloque de éxito A ejecutarse cuando la solicitud finaliza correctamente, con un código de estado en el rango de 2xx y con un tipo de contenido aceptable (por ejemplo "image/png").Este bloque no tiene ningún valor de retorno y toma tres argumentos: el objeto de la solicitud de la operación, la respuesta de la solicitud y la imagen creada a partir de los datos de la respuesta.
@paramobjeto de bloque del fracaso A ejecutarse cuando la solicitud termina sin éxito.Este bloque no tiene ningún valor de retorno y toma tres argumentos: el objeto de la solicitud de la operación, la respuesta de la solicitud y el error asociado a la causa de la operación fracasada.

@returnUna nueva operación de petición de imagen
*/
#if defined(__IPHONE_OS_VERSION_MIN_REQUIRED)
+ (instancetype) imageRequestOperationWithRequest:(NSURLRequest *) urlRequest
imageProcessingBlock: (UIImage * (^) (UIImage * imagen)) imageProcessingBlock
éxito: (vacío(^) (NSURLRequest * solicitar, NSHTTPURLResponse * respuesta, UIImage * imagen)) éxito
falta: (vacío(^) (NSURLRequest * solicitar, NSHTTPURLResponse * respuesta, NSError * error)) falta;'
#elif defined(__MAC_OS_X_VERSION_MIN_REQUIRED)
+ (instancetype) imageRequestOperationWithRequest:(NSURLRequest *) urlRequest
imageProcessingBlock: (NSImage * (^) (NSImage * imagen)) imageProcessingBlock
éxito: (vacío(^) (NSURLRequest * solicitar, NSHTTPURLResponse * respuesta, NSImage * imagen)) éxito
falta: (vacío(^) (NSURLRequest * solicitar, NSHTTPURLResponse * respuesta, NSError * error)) falta;'
#endif

@end




AFHTTPRequestOperation.h
============================================================
Idioma: Objective-C
Licencia: otros

// AFHTTPRequestOperation.h
//
// Copyright (c) 2011 Gowalla (http://gowalla.com/)
//
// Permiso es por la presente otorga, gratuitamente, a cualquier persona obtener una copia
// de este software y archivos de la documentación asociada (el "Software"), para tratar
// en el Software sin restricciones, incluyendo sin limitación los derechos
// para usar, copiar, modificar, combinar, publicar, distribuir, otorgar una sublicencia, y/o vender
// copias del Software y para permitir a las personas a las que el Software es
// amueblado para hacerlo, sujeto a las siguientes condiciones:
//
// El aviso de copyright anterior y este aviso de permiso se incluirán en
// todas las copias o partes importantes del Software.
//
// EL SOFTWARE SE SUMINISTRA "TAL CUAL", SIN GARANTÍA DE CUALQUIER TIPO O EXPRESA
// IMPLÍCITAS, INCLUYENDO PERO NO LIMITADAS A, LAS GARANTÍAS DE COMERCIABILIDAD,
// APTITUD PARA UN PROPÓSITO PARTICULAR Y NO INFRACCIÓN.EN NINGÚN CASO LA
// AUTORES O LOS TITULARES DEL COPYRIGHT SERÁN RESPONSABLES DE CUALQUIER RECLAMACIÓN, DAÑOS U OTROS
// RESPONSABILIDAD, YA SEA EN UNA ACCIÓN DE RESPONSABILIDAD CONTRACTUAL, EXTRACONTRACTUAL O DE OTRO TIPO, QUE SE PRESENTA,
// DE O EN RELACIÓN CON EL SOFTWARE O EL USO U OTRAS OPERACIONES EN
// EL SOFTWARE.

#import<Foundation/Foundation.h>
#import"AFURLConnectionOperation.h"

/**
'AFHTTPRequestOperation' es una subclase de 'AFURLConnectionOperation' para peticiones utilizando los protocolos HTTP o HTTPS.Resume el concepto de códigos de Estado aceptable y tipos de contenido, que determinan el éxito o fracaso de una solicitud.
*/
@interfaceAFHTTPRequestOperation: AFURLConnectionOperation

///----------------------------------------------
///@nameObtener información de conexión HTTP URL
///----------------------------------------------

/**
La última respuesta HTTP recibida por la conexión de la operación.
*/
' @property('readonly', 'o', 'fuerte') NSHTTPURLResponse * respuesta;'

///----------------------------------------------------------
///@nameAdministrar y comprobar las respuestas HTTP aceptable
///----------------------------------------------------------

/**
Un valor booleano que se corresponde con el código de estado de la respuesta sea dentro del conjunto especificado de códigos de Estado aceptable.Devuelve 'Sí' si 'AcceptableStatusCodes' es 'nada'.
*/
' @property()'o','readonly')BOOLhasAcceptableStatusCode;'

/**
Un valor booleano que se corresponde con el tipo MIME de la respuesta sea entre el conjunto especificado de tipos de contenido aceptables.Devuelve 'Sí' si 'AcceptableContentTypes' es 'nada'.
*/
' @property()'o','readonly')BOOLhasAcceptableContentType;'

/**
La cola de envío de devolución de llamada en éxito.Si 'NULL' (por defecto), el principal se utiliza la cola.
*/
' @property()'o',asignar) dispatch_queue_t successCallbackQueue;'

/**
La cola de envío de devolución de llamada en caso de error.Si 'NULL' (por defecto), el principal se utiliza la cola.
*/
' @property()'o',asignar) dispatch_queue_t failureCallbackQueue;'

///------------------------------------------------------------
///@nameGestión de códigos de Estado aceptable de HTTP y tipos de contenido
///------------------------------------------------------------

/**
Devuelve un objeto 'NSIndexSet' que contienen los rangos de códigos de estado HTTP aceptables.Cuando no-'nada', la operación establezca la propiedad 'error' error en 'AFErrorDomain'.Verhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html

De forma predeterminada, esto es el rango de 200 a 299, inclusive.
*/
+ (NSIndexSet *) acceptableStatusCodes;'

/**
Agrega códigos de estado al conjunto de aceptables códigos de estado HTTP devuelto por '+ acceptableStatusCodes' en las llamadas posteriores de esta clase y sus descendientes.

@paramstatusCodes los códigos de estado que se agregará al conjunto de códigos de estado HTTP aceptables
*/
+ (vacío) addAcceptableStatusCodes:(NSIndexSet *) statusCodes;'

/**
Devuelve un objeto 'NSSet' que contiene los tipos MIME aceptables.Cuando no-'nada', la operación establezca la propiedad 'error' error en 'AFErrorDomain'.Verhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

De forma predeterminada, es 'nada'.
*/
+ (NSSet *) acceptableContentTypes;'

/**
Agrega los tipos de contenido al conjunto de tipos MIME aceptables devuelto por '+ acceptableContentTypes' en las llamadas posteriores de esta clase y sus descendientes.

@paramcontentTypes los tipos de contenido en el conjunto de tipos MIME aceptables
*/
+ (vacío) addAcceptableContentTypes:(NSSet *) contentTypes;'


///-----------------------------------------------------
///@nameDeterminar si una solicitud puede ser procesada
///-----------------------------------------------------

/**
Un valor booleano determinar si o no la clase puede procesar la solicitud especificada.Por ejemplo, 'AFJSONRequestOperation' puede verificar para asegurarse de que el contenido fue 'aplicación/json' o la extensión de la ruta de enlace era '.json'.

@paramurlRequest la solicitud que está decidida a ser apoyado o no admite esta clase
*/
+ (BOOL) canProcessRequest:(NSURLRequest *) urlRequest;'

///-----------------------------------------------------------
///@nameAjuste terminación bloque éxito / fracaso las devoluciones de llamada
///-----------------------------------------------------------

/**
Establece la propiedad 'completionBlock' con un bloque que se ejecuta el éxito especificado o bloque de fracaso, dependiendo del estado de la solicitud de terminación.Si "error" devuelve un valor, que puede ser causado por un código de estado inaceptable o tipo de contenido, se ejecuta el "fracaso".De lo contrario, se ejecuta el "éxito".

Este método se debe reemplazar en subclases para especificar el objeto de respuesta que pasa en el bloque de éxito.

@paraméxito el bloque a ejecutarse en la terminación de una solicitud exitosa.Este bloque no tiene ningún valor de retorno y toma dos argumentos: el funcionamiento del receptor y el objeto construido a partir de los datos de respuesta de la solicitud.
@paramfalta el bloque a ejecutarse en la terminación de un pedido sin éxito.Este bloque no tiene ningún valor de retorno y toma dos argumentos: el funcionamiento del receptor y el error durante la solicitud de.
*/
- (vacío) setCompletionBlockWithSuccess: (vacío(^) (AFHTTPRequestOperation * operación,idresponseObject)) éxito
falta: (vacío(^) (AFHTTPRequestOperation * operación, NSError * error)) falta;'

@end

///----------------
///@nameFunciones
///----------------

/**
Devuelve un conjunto de tipos MIME detectados en un encabezado 'Content-Type' HTTP 'Aceptar'.
*/
externNSSet * AFContentTypesFromHTTPHeader(NSString *string);'





AFNetworkActivityIndicatorManager.h
============================================================
Idioma: Objective-C
Licencia: otros

// AFNetworkActivityIndicatorManager.h
//
// Copyright (c) 2011 Gowalla (http://gowalla.com/)
//
// Permiso es por la presente otorga, gratuitamente, a cualquier persona obtener una copia
// de este software y archivos de la documentación asociada (el "Software"), para tratar
// en el Software sin restricciones, incluyendo sin limitación los derechos
// para usar, copiar, modificar, combinar, publicar, distribuir, otorgar una sublicencia, y/o vender
// copias del Software y para permitir a las personas a las que el Software es
// amueblado para hacerlo, sujeto a las siguientes condiciones:
//
// El aviso de copyright anterior y este aviso de permiso se incluirán en
// todas las copias o partes importantes del Software.
//
// EL SOFTWARE SE SUMINISTRA "TAL CUAL", SIN GARANTÍA DE CUALQUIER TIPO O EXPRESA
// IMPLÍCITAS, INCLUYENDO PERO NO LIMITADAS A, LAS GARANTÍAS DE COMERCIABILIDAD,
// APTITUD PARA UN PROPÓSITO PARTICULAR Y NO INFRACCIÓN.EN NINGÚN CASO LA
// AUTORES O LOS TITULARES DEL COPYRIGHT SERÁN RESPONSABLES DE CUALQUIER RECLAMACIÓN, DAÑOS U OTROS
// RESPONSABILIDAD, YA SEA EN UNA ACCIÓN DE RESPONSABILIDAD CONTRACTUAL, EXTRACONTRACTUAL O DE OTRO TIPO, QUE SE PRESENTA,
// DE O EN RELACIÓN CON EL SOFTWARE O EL USO U OTRAS OPERACIONES EN
// EL SOFTWARE.

#import<Foundation/Foundation.h>

#import<Availability.h>

#if defined(__IPHONE_OS_VERSION_MIN_REQUIRED)
#import<UIKit/UIKit.h>

/**
'AFNetworkActivityIndicatorManager' administra el estado del indicador de actividad de red en la barra de estado.Cuando está activado, se Escuchar para las notificaciones que indica que una operación de la petición de red ha iniciado o terminado y empezar o dejar de animar el indicador en consecuencia.El número de solicitudes activos es incrementado y disminuye al igual que una pila o un semáforo y el indicador de actividad animará siempre y cuando ese número es mayor que cero.

Debe habilitar la instancia compartida de 'AFNetworkActivityIndicatorManager' cuando la aplicación finaliza el lanzamiento.En ' AppDelegate aplicación: didFinishLaunchingWithOptions:' puedes hacerlo con el siguiente código:

[SetEnabled:YES [AFNetworkActivityIndicatorManager sharedManager]]; "

Mediante el establecimiento de 'isNetworkActivityIndicatorVisible' 'Sí' para 'sharedManager', el indicador de actividad de red será Mostrar y ocultar automáticamente como solicitudes de comienzo y fin.No debería jamás llamar 'incrementActivityCount' o 'decrementActivityCount'.

Vea la sección de guías de interfaz humana de Apple sobre el indicador de actividad de red para obtener más información:
http://developer.Apple.com/library/iOS/#Documentation/UserExperience/conceptual/MobileHIG/UIElementGuidelines/UIElementGuidelines.html#//apple_ref/doc/UID/TP40006556-CH13-SW44
*/
@interfaceAFNetworkActivityIndicatorManager: NSObject

/**
Un valor booleano que indica si está habilitado el administrador.

En caso afirmativo, el administrador cambiará indicador de actividad de red bar estado según las notificaciones de operación de la red que recibe.El valor predeterminado es NO.
*/
' @property('o', asignar, getter = isEnabled)BOOLactivado;'

/**
Un valor booleano que indica si el indicador de actividad de red se muestra actualmente en la barra de estado.
*/
' @property()'readonly','o',asignar)BOOLisNetworkActivityIndicatorVisible;'

/**
Devuelve el objeto de administrador de red compartida actividad indicador para el sistema.

@returnEl administrador de indicador de actividad de red de todo el sistema.
*/
+ sharedManager (instancetype); "

/**
Incrementa el número de solicitudes de red activa.Si este número es cero antes de incremento, con esto iniciará animar el indicador de actividad de red de barra de estado.
*/
- (vacío) incrementActivityCount;'

/**
Disminuye el número de red activa solicitudes.Si este número se convierte en cero antes de disminuir, esto dejará de animar el indicador de actividad de red de barra de estado.
*/
- (vacío) decrementActivityCount;'

@end

#endif




AFHTTPClient.h
============================================================
Idioma: Objective-C
Licencia: otros

// AFHTTPClient.h
//
// Copyright (c) 2011 Gowalla (http://gowalla.com/)
//
// Permiso es por la presente otorga, gratuitamente, a cualquier persona obtener una copia
// de este software y archivos de la documentación asociada (el "Software"), para tratar
// en el Software sin restricciones, incluyendo sin limitación los derechos
// para usar, copiar, modificar, combinar, publicar, distribuir, otorgar una sublicencia, y/o vender
// copias del Software y para permitir a las personas a las que el Software es
// amueblado para hacerlo, sujeto a las siguientes condiciones:
//
// El aviso de copyright anterior y este aviso de permiso se incluirán en
// todas las copias o partes importantes del Software.
//
// EL SOFTWARE SE SUMINISTRA "TAL CUAL", SIN GARANTÍA DE CUALQUIER TIPO O EXPRESA
// IMPLÍCITAS, INCLUYENDO PERO NO LIMITADAS A, LAS GARANTÍAS DE COMERCIABILIDAD,
// APTITUD PARA UN PROPÓSITO PARTICULAR Y NO INFRACCIÓN.EN NINGÚN CASO LA
// AUTORES O LOS TITULARES DEL COPYRIGHT SERÁN RESPONSABLES DE CUALQUIER RECLAMACIÓN, DAÑOS U OTROS
// RESPONSABILIDAD, YA SEA EN UNA ACCIÓN DE RESPONSABILIDAD CONTRACTUAL, EXTRACONTRACTUAL O DE OTRO TIPO, QUE SE PRESENTA,
// DE O EN RELACIÓN CON EL SOFTWARE O EL USO U OTRAS OPERACIONES EN
// EL SOFTWARE.

#import<Foundation/Foundation.h>
#import"AFURLConnectionOperation.h"

#import<Availability.h>

/**
'AFHTTPClient' captura los patrones comunes de la comunicación con una aplicación web a través de HTTP.Encapsula información como URL base, las credenciales de autorización, y las cabeceras HTTP, y los utiliza para construir y gestionar la ejecución de las operaciones de solicitud HTTP.

## Contenido automático

Instancias de 'AFHTTPClient' pueden especificar qué tipos de solicitudes espera y debe manejar al registrar clases de operación HTTP para el análisis automático.Clases registradas determinará si puede manejar una petición particular y luego construir una operación de petición por consiguiente en 'enqueueHTTPRequestOperationWithRequest:success:failure'.

## Información sobre la creación de subclases

En la mayoría de los casos, se debe crear una subclase de 'AFHTTPClient' para cada aplicación web o sitio web que su aplicación se comunica con.A menudo es útil, también, definir un método de clase que devuelve que un singleton compartido a cliente HTTP en cada subclase, que persiste credenciales de autenticación y otra configuración a través de toda la aplicación.

## Métodos para anulación

Para cambiar el comportamiento de todos los construcción de solicitud url para una subclase de 'AFHTTPClient', reemplace 'requestWithMethod:path:parameters'.

Para cambiar el comportamiento de todos los construcción de operación solicitud para una subclase de 'AFHTTPClient', reemplace 'HTTPRequestOperationWithRequest:success:failure'.

## Default encabezados

De forma predeterminada, el 'AFHTTPClient' establece los siguientes encabezados HTTP:

-' Idioma aceptar: (delimitado por comas preferido idiomas), at-nosotros; "q = 0 '
-' User-Agent: (genera user agent)'

Usted puede reemplazar estos encabezados HTTP o definir nuevos utilizando ' setDefaultHeader:value:'.

## Construcción de URL utilizando rutas relativas

Ambos '-requestWithMethod:path:parameters:' y '-multipartFormRequestWithMethod:path:parameters:constructingBodyWithBlock:' construir URLs de la ruta de acceso relativa a la '-baseURL ", usando" NSURL + URLWithString:relativeToURL:'.A continuación se muestran algunos ejemplos de cómo interactúan 'baseURL' y rutas relativas:

NSURL * baseURL = [NSURL URLWithString: @"http://example.com/v1/"]; "
[RelativeToURL:baseURL NSURL URLWithString:@"foo"]; "//http://example.com/v1/foo
[RelativeToURL:baseURL NSURL URLWithString:@"foo?bar=baz"]; "//http://example.com/v1/foo?bar=baz
[RelativeToURL:baseURL NSURL URLWithString:@"/foo"]; "//http://example.com/foo
[NSURL URLWithString:@"foo/" relativeToURL:baseURL]; "//http://example.com/v1/foo
[NSURL URLWithString:@"/foo/" relativeToURL:baseURL]; "//http://example.com/foo/
[NSURL URLWithString: @"http://example2.com/" relativeToURL:baseURL]; "//http://example2.com/

También importante tener en cuenta es que se agregará una barra a cualquier 'baseURL' sin uno, que de lo contrario causaría un comportamiento inesperado al construir URLs con rutas sin una barra principal.

## NSCoding / conformidad de Nscopying

'AFHTTPClient'se ajusta a los protocolos de la 'NSCoding' y 'NSCopying', que permite operaciones archiva en disco, y copiar en memoria, respectivamente.Hay algunas pequeñas advertencias a tener en cuenta, sin embargo:

-Archivos y copias de clientes HTTP se inicializará con una cola vacía de la operación.
-NSCoding no puede serializar / deserializar propiedades de bloque, por lo que un archivo de un cliente HTTP no incluirá cualquier bloque de devolución de llamada de accesibilidad que puede establecerse.
*/

#ifdef _SYSTEMCONFIGURATION_H
TypeDefenum{
AFNetworkReachabilityStatusUnknown= -1,
AFNetworkReachabilityStatusNotReachable=0,
AFNetworkReachabilityStatusReachableViaWWAN =1,
AFNetworkReachabilityStatusReachableViaWiFi =2,
} AFNetworkReachabilityStatus;'
#else
#warning SystemConfiguration marco no se encuentra en proyecto o no incluidos en el encabezado precompilado.Funcionalidad de accesibilidad de la red no estará disponible.
#endif

#ifndef __UTTYPE__
#if __IPHONE_OS_VERSION_MIN_REQUIRED
marco de MobileCoreServices de #warning no se encuentra en proyecto, o no incluidos en el encabezado precompilado.MIME tipo detección automática cuando la carga de archivos en las solicitudes de varias partes no estará disponible.
#else
#warning CoreServices marco no se encuentra en proyecto o no incluidos en el encabezado precompilado.MIME tipo detección automática cuando la carga de archivos en las solicitudes de varias partes no estará disponible.
#endif
#endif

TypeDefenum{
AFFormURLParameterEncoding,
AFJSONParameterEncoding,
AFPropertyListParameterEncoding,
} AFHTTPClientParameterEncoding;'

@classAFHTTPRequestOperation;'
@protocolAFMultipartFormData;'

@interfaceAFHTTPClient: NSObject < NSCoding, NSCopying >

///---------------------------------------
///@nameAcceder a propiedades de cliente HTTP
///---------------------------------------

/**
La url que se utiliza como base para las rutas especificadas en métodos tales como 'getPath:parameters:success:failure'
*/
' @property()'readonly','o','fuerte') NSURL * baseURL;'

/**
La cadena codificación utilizada en la construcción de las peticiones de url.Se trata de 'NSUTF8StringEncoding' de forma predeterminada.
*/
' @property()'o',asignar) NSStringEncoding stringEncoding;'

/**
El valor de 'AFHTTPClientParameterEncoding' correspondiente a cómo se codifican los parámetros en un cuerpo de la solicitud.Se trata de 'AFFormURLParameterEncoding' de forma predeterminada.

@warningAlgunos anidar estructuras de parámetro, como una matriz incrustada de hash que contiene claves inconsistentes (es decir, '@{@"": @[@{@ "a": @(1)},@{@ "b": @(2)}]}'), no se puede representar sin ambigüedad en las cadenas de consulta.Es ' strong'ly recomienda que una codificación sin ambigüedades, como 'AFJSONParameterEncoding', es utilizada durante el registro de estructuras complicadas o no determinista parámetro.
*/
' @property()'o',asignar) AFHTTPClientParameterEncoding parameterEncoding;'

/**
La cola de la operación que gestiona cola de operaciones por el cliente HTTP.
*/
' @property()'readonly','o','fuerte') NSOperationQueue * operationQueue;'

/**
El estado de la accesibilidad desde el dispositivo a la corriente 'baseURL' de la 'AFHTTPClient'.

@warningEsta propiedad requiere el marco de la 'SystemConfiguration'.Añadir en fase de construcción del objetivo activo "Enlace binario con biblioteca" y añadir '#import <SystemConfiguration/SystemConfiguration.h> ' al prefijo de la rúbrica del proyecto ('Prefix.pch').
*/
#ifdef _SYSTEMCONFIGURATION_H
' @property()'readonly','o',asignar) AFNetworkReachabilityStatus networkReachabilityStatus;'
#endif

/**
Modo de fijación de SSL por defecto para cada 'AFHTTPRequestOperation' creado por ' HTTPRequestOperationWithRequest:success:failure:'.
*/
#ifdef _AFNETWORKING_PIN_SSL_CERTIFICATES_
' @property()'o',asignar) AFURLConnectionOperationSSLPinningMode defaultSSLPinningMode;'
#endif

/**
Si cada 'AFHTTPRequestOperation' creado por ' HTTPRequestOperationWithRequest:success:failure:' debe aceptar un certificado SSL no válido.

Si es '_AFNETWORKING_ALLOW_INVALID_SSL_CERTIFICATES_', esta propiedad por defecto para el "Sí" para atrás compatibilidad.De lo contrario, esta propiedad por defecto 'NO'.
*/
' @property()'o',asignar)BOOLallowsInvalidSSLCertificate;'

///---------------------------------------------
///@nameCreación e iniciación de clientes HTTP
///---------------------------------------------

/**
Crea e inicializa un objeto 'AFHTTPClient' con la dirección URL base especificada.

@paramurl dela URL base para el cliente HTTP.Este argumento no debe ser 'nada'.

@returnEl cliente HTTP recién inicializado
*/
+ (instancetype) clientWithBaseURL:(NSURL *) url; "

/**
Inicializa un objeto 'AFHTTPClient' con la dirección URL base especificada.

Este es el inicializador designado.

@paramurl dela URL base para el cliente HTTP.Este argumento no debe ser 'nada'.

@returnEl cliente HTTP recién inicializado
*/
- (ID) initWithBaseURL:(NSURL *) url;'

///-----------------------------------
///@nameGestión de estado de la accesibilidad
///-----------------------------------

/**
Fija un callback para ejecutarse cuando cambia la disponibilidad de red del host 'baseURL'.

@paramobjeto a ejecutarse cuando cambia la disponibilidad de red del host 'baseURL' enbloque A bloque...Este bloque no tiene ningún valor de retorno y toma un único argumento que representa los diferentes Estados de accesibilidad desde el dispositivo a la 'baseURL'.

@warningEste método requiere el marco de la 'SystemConfiguration'.Añadir en fase de construcción del objetivo activo "Enlace binario con biblioteca" y añadir '#import <SystemConfiguration/SystemConfiguration.h> ' al prefijo de la rúbrica del proyecto ('Prefix.pch').
*/
#ifdef _SYSTEMCONFIGURATION_H
- (vacío) setReachabilityStatusChangeBlock: (vacío(^) (AFNetworkReachabilityStatus estado)) block;'
#endif

///-------------------------------
///@nameGestión de las operaciones HTTP
///-------------------------------

/**
Mediante solicitud, intenta registrar una subclase de 'AFHTTPRequestOperation', a una cadena para generar automáticamente las operaciones de solicitud desde una dirección URL.

Cuando se llama a 'enqueueHTTPRequestOperationWithRequest:success:failure', cada clase se consulta a su vez a ver si puede manejar la petición específica.La primera clase para devolver el 'Sí' cuando envió un ' canProcessRequest:' mensaje se utiliza para crear una operación utilizando ' initWithURLRequest:' y ' setCompletionBlockWithSuccess:failure:'.No hay ninguna garantía que se consultará a todas las clases registradas.Las clases se consultan en el orden inverso de su registro.Intentar registrar una clase ya registrado se moverá a la parte superior de la lista.
;’;’;’;’;’;’;’;’;’;’;’;’
@paramoperationClass la subclase del 'AFHTTPRequestOperation' para registrar

@return'Sí' si el registro es exitoso, de lo contrario "NO".La condición de fallo único es si 'operationClass' no es una subclase de 'AFHTTPRequestOperation'.
*/
- (BOOL) registerHTTPOperationClass: operationClass (clase);'

/**
Anula el registro de la subclase especificada de 'AFHTTPRequestOperation' de la cadena de clases consultado Cuándo '-'requestWithMethod:path:parameters se llama.

@paramoperationClass la subclase del 'AFHTTPRequestOperation' para registrar
*/
- (vacío) unregisterHTTPOperationClass: operationClass (clase);'

///----------------------------------
///@nameGestión de los valores de encabezado HTTP
///----------------------------------

/**
Retorna el valor de las cabeceras HTTP en objetos de petición creados por el cliente HTTP.

@paramencabezado el HTTP header para devolver el valor por defecto

@returnEl valor predeterminado para el encabezado HTTP, o nada si no se especifica
*/
-(NSString *) defaultValueForHeader:(NSString *) encabezado; "

/**
Establece el valor para los encabezados HTTP en objetos de la petición hechos por el cliente HTTP.Si 'nada', quita el valor existente para ese encabezado.

@paramencabezado el HTTP header para establecer un valor predeterminado para
@paramvalor el valor por defecto para el encabezado especificado, o "nil
*/
- (vacío) setDefaultHeader:(NSString *) jefe
valor:(NSString *);'

/**
Establece el encabezado de "Autorización" HTTP en objetos de la petición hechos por el cliente HTTP en un valor de autenticación básica con codificado en Base64 username y contraseña.Esto sobrescribirá cualquier valor existente para este encabezado.

@paramnombre de usuario el HTTP auth básica username
@paramcontraseña contraseña de autenticación básica HTTP el
*/
- (vacío) nombre de usuario de setAuthorizationHeaderWithUsername:(NSString *)
contraseña:(NSString *) contraseña; "

/**
Establece el encabezado HTTP "Autorización" en objetos de la petición hechos por el cliente HTTP en un valor de autenticación basada en token, como un token de acceso de OAuth.Esto sobrescribirá cualquier valor existente para este encabezado.

@paramtoken el token de autenticación
*/
- (vacío) setAuthorizationHeaderWithToken:(NSString *) token;'


/**
Borra cualquier valor existente para el encabezado de "Autorización" HTTP.
*/
- (vacío) clearAuthorizationHeader;'

///-------------------------------
///@nameGestión de credenciales de URL
///-------------------------------

/**
Establecer la credencial de URL por defecto para programarse para las operaciones de la solicitud.

@paramcredencial de credenciales de la URL
*/
- (vacío) setDefaultCredential:(NSURLCredential *) credencial;'

///-------------------------------
///@nameCreación de objetos de la petición
///-------------------------------

/**
Crea un objeto 'NSMutableURLRequest' con el método HTTP especificado y la ruta.

Si el método HTTP 'GET', 'Cabeza' o 'Eliminar', los parámetros se utilizará para construir una cadena de consulta url codificado que se anexa a URL de la solicitud.De lo contrario, los parámetros se codifican según el valor de la propiedad 'parameterEncoding' y como el cuerpo de la solicitud.

@parammétodo el HTTP de la solicitud, como 'GET', 'POST', 'PUT' o 'Eliminar'.Este parámetro no debe ser 'nada'.
@paramcamino el camino para ser añadido al cliente HTTP URL base y usadas como la URL de solicitud.Si 'nada', ningún camino será agregado a la URL base.
@paramparámetros los parámetros a ser establecido como una cadena de consulta de solicitudes 'GET', o la solicitud cuerpo HTTP.

@returnUn ' NSMutableURLRequest' objeto
*/
-(NSMutableURLRequest *) método de:(NSString *) de requestWithMethod
Ruta:(NSString *) ruta
parámetros de:(NSDictionary *);'

/**
Crea un objeto 'NSMutableURLRequest' con el método HTTP especificado y la ruta y construye un cuerpo HTTP "multipart/form-data", utilizando los parámetros especificados y bloque de datos de varias partes de la forma.Verhttp://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.2

Solicitudes de varias partes de forma automáticamente son escuchadas, lectura de archivos directamente desde el disco junto con los datos en la memoria en un solo cuerpo HTTP.El objeto resultante de la 'NSMutableURLRequest' tiene una propiedad de 'HTTPBodyStream', así abstenerse de ajuste 'HTTPBodyStream' o 'HTTPBody' en este objeto de la solicitud, como se borrará hacia fuera de la corriente del cuerpo forma de varias partes.

@parammétodo el HTTP de la solicitud.Este parámetro no debe ser 'GET' o 'Cabeza' o 'nada'.
@paramcamino, el camino para ser añadido al cliente HTTP URL base y usadas como la URL de la petición.
@paramparámetros los parámetros a ser codificado y fijar en la solicitud cuerpo HTTP.
@parambloque block A que toma un único argumento y añade datos al cuerpo HTTP.El argumento del bloque es un objeto de adopción del Protocolo de 'AFMultipartFormData'.Esto puede utilizarse para subir archivos, codificar cuerpo HTTP como JSON o XML o especificar múltiples valores para el parámetro de la mismo, como uno de los valores del array.

@returnUn ' NSMutableURLRequest' objeto
*/
-(NSMutableURLRequest *) método de:(NSString *) de multipartFormRequestWithMethod
Ruta:(NSString *) ruta
parámetros de:(NSDictionary *)
constructingBodyWithBlock: (vacío(^)(id<AFMultipartFormData> formData)) block;'

///-------------------------------
///@nameCrear operaciones HTTP
///-------------------------------

/**
Crea un 'AFHTTPRequestOperation'.

Con el fin de determinar qué tipo de operación se crea, se consulta cada subclase registrado conforme al Protocolo de 'AFHTTPClient' (en orden inverso de Cuándo especificaron) para ver si puede manejar la petición específica.La primera clase para devolver el 'Sí' cuando envió un ' canProcessRequest:' mensaje se utiliza para generar una operación utilizando ' HTTPRequestOperationWithRequest:success:failure:'.

@paramel objeto de la solicitud para ser cargado de forma asincrónica durante la ejecución de la operación de urlRequest.
@paramobjeto de bloque de éxito A ejecutarse cuando la operación de solicitud finaliza correctamente.Este bloque no tiene ningún valor de retorno y toma dos argumentos: la operación de solicitud creado y el objeto creado a partir de los datos de respuesta de la solicitud.
@paramfalta A bloque objeto a ejecutarse cuando la operación de solicitud termina sin éxito, o termina con éxito, pero detectó un error al analizar los datos de respuesta.Este bloque no tiene ningún valor de retorno y toma dos argumentos:, la operación de solicitud creada y 'NSError' objeto que describe la red o parsing error ocurrido.
*/
-(AFHTTPRequestOperation *) HTTPRequestOperationWithRequest:(NSURLRequest *) urlRequest
éxito: (vacío(^) (AFHTTPRequestOperation * operación,idresponseObject)) éxito
falta: (vacío(^) (AFHTTPRequestOperation * operación, NSError * error)) falta;'

///----------------------------------------
///@nameGestión de las operaciones HTTP de cola
///----------------------------------------

/**
Cola un 'AFHTTPRequestOperation' a cola de operación del cliente HTTP.

@paramoperación HTTP de la petición que cola.
*/
- (vacío) enqueueHTTPRequestOperation:(AFHTTPRequestOperation *) operación;'

/**
Cancela todas las operaciones en cola de operación del cliente HTTP cuyas URL coincide con el método HTTP especificado y la ruta.

Este método sólo cancela 'AFHTTPRequestOperations', cuya dirección URL de la solicitud coincide con la URL base del cliente HTTP con el camino que se anexa.Para un control total sobre el ciclo de vida de las operaciones de la cola, puede acceder a la propiedad 'operationQueue' directamente, que le permite, por ejemplo, cancelar las operaciones de filtrado por un predicado, o simplemente use '-'cancelAllRequests.Tenga en cuenta que la cola de la operación pueden incluir operaciones HTTP no, así que asegúrese de comprobar el tipo antes de intentar introspect directamente propiedad de 'solicitud' de la operación.
;’;’;’;’;’;’;’;’;’;’;’;’
@parammétodo HTTP el velludo para las solicitudes canceladas, como 'GET', 'POST', 'PUT' o 'Eliminar'.Si las operaciones de solicitud 'nada', todos con URLs que empareja el camino se cancelarán.
@paramcamino el camino a la dirección URL base cliente HTTP que partido contra las solicitudes canceladas.Si 'nada', ningún camino será agregado a la URL base.
*/
- (vacío) cancelAllHTTPOperationsWithMethod:(NSString *) método ruta:(NSString *) ruta;'

///---------------------------------------
///@nameDosificación de las operaciones de solicitud HTTP
///---------------------------------------

/**
Crea y cola una 'AFHTTPRequestOperation' a cola de operación del cliente HTTP para cada objeto de la petición especificada en un lote.Cuando termina la operación de cada petición, se ejecuta el bloque de progreso especificado, hasta que todas las operaciones de solicitud hayan terminado, momento en el que también se ejecuta el bloque de terminación.

Las operaciones se crean pasando los objetos especificados de 'NSURLRequest' en 'solicitudes', con '-HTTPRequestOperationWithRequest:success:failure:', con 'cero' para el 'éxito' y el 'fracaso' parámetros.

@paramurlRequests 'NSURLRequest' permite crear los objetos y las operaciones de enqueue.
@paramprogressBlock un objeto de bloque para ejecutarse sobre la terminación de cada operación de petición en el lote.Este bloque no tiene ningún valor de retorno y toma dos argumentos: el número de operaciones que ya han terminado la ejecución y el número total de operaciones.
@paramcompletionBlock un objeto bloque a ejecutarse al cumplimiento de todas las operaciones de solicitud en el lote.Este bloque no tiene ningún valor de retorno y toma un único argumento: las operaciones por lotes petición.
*/
- (vacío) enqueueBatchOfHTTPRequestOperationsWithRequests:(NSArray *) urlRequests
progressBlock: (vacío(^) (NSUInteger numberOfFinishedOperations, NSUInteger totalNumberOfOperations)) progressBlock
completionBlock: (vacío(^) (NSArray * operaciones)) completionBlock;'

/**
Las operaciones de petición especificada en un lote de cola.Cuando termina la operación de cada petición, se ejecuta el bloque de progreso especificado, hasta que todas las operaciones de solicitud hayan terminado, momento en el que también se ejecuta el bloque de terminación.

@paramlas operaciones de las operaciones de solicitud se utilizan para procesar por lotes y cola.
@paramprogressBlock un objeto de bloque para ejecutarse sobre la terminación de cada operación de petición en el lote.Este bloque no tiene ningún valor de retorno y toma dos argumentos: el número de operaciones que ya han terminado la ejecución y el número total de operaciones.
@paramcompletionBlock un objeto bloque a ejecutarse al cumplimiento de todas las operaciones de solicitud en el lote.Este bloque no tiene ningún valor de retorno y toma un único argumento: las operaciones por lotes petición.
*/
- (vacío) las operaciones de:(NSArray *) de enqueueBatchOfHTTPRequestOperations
progressBlock: (vacío(^) (NSUInteger numberOfFinishedOperations, NSUInteger totalNumberOfOperations)) progressBlock
completionBlock: (vacío(^) (NSArray * operaciones)) completionBlock;'

///---------------------------
///@nameHacer peticiones HTTP
///---------------------------

/**
Crea un 'AFHTTPRequestOperation' con una petición de 'GET' y cola a cola de operación del cliente HTTP.

@paramcamino, el camino para ser añadido al cliente HTTP URL base y usadas como la URL de la petición.
@paramparámetros los parámetros codificados y anexados como la cadena de consulta para la URL de la petición.
@paramobjeto de bloque de éxito A ejecutarse cuando la operación de solicitud finaliza correctamente.Este bloque no tiene ningún valor de retorno y toma dos argumentos: la operación de solicitud creado y el objeto creado a partir de los datos de respuesta de la solicitud.
@paramfalta A bloque objeto a ejecutarse cuando la operación de solicitud termina sin éxito, o termina con éxito, pero detectó un error al analizar los datos de respuesta.Este bloque no tiene ningún valor de retorno y toma dos argumentos:, la operación de solicitud creada y 'NSError' objeto que describe la red o parsing error ocurrido.

@see- HTTPRequestOperationWithRequest: éxito: fallo:
*/
- (vacío) getPath:(NSString *) camino
parámetros de:(NSDictionary *)
éxito: (vacío(^) (AFHTTPRequestOperation * operación,idresponseObject)) éxito
falta: (vacío(^) (AFHTTPRequestOperation * operación, NSError * error)) falta;'

/**
Crea un 'AFHTTPRequestOperation' con una solicitud 'POST' y cola a cola de operación del cliente HTTP.

@paramcamino, el camino para ser añadido al cliente HTTP URL base y usadas como la URL de la petición.
@paramparámetros los parámetros a ser codificado y fijar en la solicitud cuerpo HTTP.
@paramobjeto de bloque de éxito A ejecutarse cuando la operación de solicitud finaliza correctamente.Este bloque no tiene ningún valor de retorno y toma dos argumentos: la operación de solicitud creado y el objeto creado a partir de los datos de respuesta de la solicitud.
@paramfalta A bloque objeto a ejecutarse cuando la operación de solicitud termina sin éxito, o termina con éxito, pero detectó un error al analizar los datos de respuesta.Este bloque no tiene ningún valor de retorno y toma dos argumentos:, la operación de solicitud creada y 'NSError' objeto que describe la red o parsing error ocurrido.

@see- HTTPRequestOperationWithRequest: éxito: fallo:
*/
- (vacío) camino de:(NSString *) postPath
parámetros de:(NSDictionary *)
éxito: (vacío(^) (AFHTTPRequestOperation * operación,idresponseObject)) éxito
falta: (vacío(^) (AFHTTPRequestOperation * operación, NSError * error)) falta;'

/**
Crea un 'AFHTTPRequestOperation' con una solicitud 'PUT' y cola a cola de operación del cliente HTTP.

@paramcamino, el camino para ser añadido al cliente HTTP URL base y usadas como la URL de la petición.
@paramparámetros los parámetros a ser codificado y fijar en la solicitud cuerpo HTTP.
@paramobjeto de bloque de éxito A ejecutarse cuando la operación de solicitud finaliza correctamente.Este bloque no tiene ningún valor de retorno y toma dos argumentos: la operación de solicitud creado y el objeto creado a partir de los datos de respuesta de la solicitud.
@paramfalta A bloque objeto a ejecutarse cuando la operación de solicitud termina sin éxito, o termina con éxito, pero detectó un error al analizar los datos de respuesta.Este bloque no tiene ningún valor de retorno y toma dos argumentos:, la operación de solicitud creada y 'NSError' objeto que describe la red o parsing error ocurrido.

@see- HTTPRequestOperationWithRequest: éxito: fallo:
*/
- (vacío) putPath:(NSString *) camino
parámetros de:(NSDictionary *)
éxito: (vacío(^) (AFHTTPRequestOperation * operación,idresponseObject)) éxito
falta: (vacío(^) (AFHTTPRequestOperation * operación, NSError * error)) falta;'

/**
Crea un 'AFHTTPRequestOperation' con una solicitud 'DELETE' y cola a cola de operación del cliente HTTP.

@paramcamino, el camino para ser añadido al cliente HTTP URL base y usadas como la URL de la petición.
@paramparámetros los parámetros codificados y anexados como la cadena de consulta para la URL de la petición.
@paramobjeto de bloque de éxito A ejecutarse cuando la operación de solicitud finaliza correctamente.Este bloque no tiene ningún valor de retorno y toma dos argumentos: la operación de solicitud creado y el objeto creado a partir de los datos de respuesta de la solicitud.
@paramfalta A bloque objeto a ejecutarse cuando la operación de solicitud termina sin éxito, o termina con éxito, pero detectó un error al analizar los datos de respuesta.Este bloque no tiene ningún valor de retorno y toma dos argumentos:, la operación de solicitud creada y 'NSError' objeto que describe la red o parsing error ocurrido.

@see- HTTPRequestOperationWithRequest: éxito: fallo:
*/
- (vacío) deletePath:(NSString *) camino
parámetros de:(NSDictionary *)
éxito: (vacío(^) (AFHTTPRequestOperation * operación,idresponseObject)) éxito
falta: (vacío(^) (AFHTTPRequestOperation * operación, NSError * error)) falta;'

/**
Crea un 'AFHTTPRequestOperation' con un 'parche' petición y cola a cola de operación del cliente HTTP.

@paramcamino, el camino para ser añadido al cliente HTTP URL base y usadas como la URL de la petición.
@paramparámetros los parámetros a ser codificado y fijar en la solicitud cuerpo HTTP.
@paramobjeto de bloque de éxito A ejecutarse cuando la operación de solicitud finaliza correctamente.Este bloque no tiene ningún valor de retorno y toma dos argumentos: la operación de solicitud creado y el objeto creado a partir de los datos de respuesta de la solicitud.
@paramfalta A bloque objeto a ejecutarse cuando la operación de solicitud termina sin éxito, o termina con éxito, pero detectó un error al analizar los datos de respuesta.Este bloque no tiene ningún valor de retorno y toma dos argumentos:, la operación de solicitud creada y 'NSError' objeto que describe la red o parsing error ocurrido.

@see- HTTPRequestOperationWithRequest: éxito: fallo:
*/
- (vacío) patchPath:(NSString *) camino
parámetros de:(NSDictionary *)
éxito: (vacío(^) (AFHTTPRequestOperation * operación,idresponseObject)) éxito
falta: (vacío(^) (AFHTTPRequestOperation * operación, NSError * error)) falta;'
@end

///----------------
///@nameConstantes
///----------------

/**
## Red accesibilidad

Las siguientes constantes son proporcionadas por 'AFHTTPClient' como Estados de accesibilidad posible de la red.

enum {}
AFNetworkReachabilityStatusUnknown,
AFNetworkReachabilityStatusNotReachable,
AFNetworkReachabilityStatusReachableViaWWAN,
AFNetworkReachabilityStatusReachableViaWiFi,
}

'AFNetworkReachabilityStatusUnknown'
No se conoce la accesibilidad de host 'baseURL'.

'AFNetworkReachabilityStatusNotReachable'
El anfitrión de 'baseURL' no se puede llegar.

'AFNetworkReachabilityStatusReachableViaWWAN'
El anfitrión de 'baseURL' puede llegar mediante una conexión celular, como EDGE o GPRS.

'AFNetworkReachabilityStatusReachableViaWiFi'
El anfitrión de 'baseURL' puede llegar mediante una conexión Wi-Fi.

### Claves para notificación UserInfo Diccionario

Notificación de cambio de cadenas que se utilizan como claves en un diccionario de "userInfo" en un estado de accesibilidad de la red.

'AFNetworkingReachabilityNotificationStatusItem'
Una clave en el Diccionario de userInfo en una notificación de 'AFNetworkingReachabilityDidChangeNotification'.
El valor correspondiente es un objeto de 'NSNumber' que representa el valor de 'AFNetworkReachabilityStatus' para el estado actual de la accesibilidad.

## Parámetro codificación

Las siguientes constantes son proporcionadas por 'AFHTTPClient' como posibles métodos para serializar parámetros en valores de cuerpo de cadena o mensaje de consulta.

enum {}
AFFormURLParameterEncoding,
AFJSONParameterEncoding,
AFPropertyListParameterEncoding,
}

'AFFormURLParameterEncoding'
Parámetros se codifican en pares de clave y campo en la cadena de consulta URL para solicitudes de 'Cabeza' y 'Eliminar' 'GET' y en el cuerpo del mensaje lo contrario.Las claves del diccionario se ordenan con el ' caseInsensitiveCompare:' selector de su descripción, con el fin de mitigar la posibilidad de consulta ambiguo cuerdas está generando no determinista.Consulte la advertencia para la propiedad 'parameterEncoding' para obtener más información.

'AFJSONParameterEncoding'
Parámetros se codifican en JSON en el cuerpo del mensaje.

'AFPropertyListParameterEncoding'
Parámetros se codifican en una lista de propiedades en el cuerpo del mensaje.
*/

///----------------
///@nameFunciones
///----------------

/**
Devuelve una cadena de consulta, construida por un conjunto de parámetros, utilizando la codificación especificada.

Cadenas de consulta se construyen recogiendo cada clave y valor par, por ciento escapar una representación de cadena del par de clave y valor y luego unirse a las parejas con "&".

Si un par de cadena de consulta tiene un 'NSArray' por su valor, cada miembro de la matriz se representará en el formato ' campo [] = value1 & field [] valor2 '.De lo contrario, el par se formatearán como "campo = valor".Representaciones de cadena de claves y valores se derivan usando la '-Descripción ' método.¿La cadena de consulta de construcción no incluye el?carácter utilizado para delimitar el componente de consulta.

@paramparámetros de los parámetros usados para construir la cadena de consulta
@paramcodificación la codificación para utilizar en la construcción de la cadena de consulta.Si no está seguro de la codificación correcta, debe usar UTF-8 ('NSUTF8StringEncoding'), que es la codificación designada por RFC 3986 como la codificación correcta para su uso en URLs.

@returnUna cadena de consulta se escapó por ciento
*/
externNSString * AFQueryStringFromParametersWithEncoding (NSDictionary * parámetros, NSStringEncoding codificación);'

///--------------------
///@nameNotificaciones
///--------------------

/**
Publicada cuando cambia de accesibilidad de la red.
Esta notificación no asigna ningún objeto de la notificación.El diccionario "userInfo" contiene un objeto 'NSNumber' bajo la clave "AFNetworkingReachabilityNotificationStatusItem", que representa el valor de 'AFNetworkReachabilityStatus' para la accesibilidad de red actual.

@warningEn orden para accesibilidad de la red monitorizada, incluyen el marco "SystemConfiguration" en fase de construcción del objetivo activo "Enlace binario con biblioteca" y añadir '#import <SystemConfiguration/SystemConfiguration.h> ' al prefijo de la rúbrica del proyecto ('Prefix.pch').
*/
#ifdef _SYSTEMCONFIGURATION_H
externNSString *constAFNetworkingReachabilityDidChangeNotification;'
externNSString *constAFNetworkingReachabilityNotificationStatusItem;'
#endif

marca de #pragma-

externNSUIntegerconstkAFUploadStream3GSuggestedPacketSize;'
externNSTimeIntervalconstkAFUploadStream3GSuggestedDelay;'

/**
El protocolo de 'AFMultipartFormData' define los métodos apoyados por el parámetro en el argumento de bloque de ' AFHTTPClient - multipartFormRequestWithMethod: ruta: parámetros: constructingBodyWithBlock:'.
*/
@protocolAFMultipartFormData

/**
Agrega el encabezado HTTP "Content-Disposition: file;' filename = #{nombre de archivo generado};' nombre = #{nombre}"' y ' Content-Type: #{generado mimeType}', seguido por los datos del archivo codificado y el límite de varias partes de la forma.

Se generará automáticamente el nombre y el tipo MIME para estos datos en el formulario, utilizando el último componente de la ruta del 'fileURL' y el sistema asociado tipo MIME para la extensión de la 'fileURL', respectivamente.

@paramfileURL la URL correspondiente al archivo cuyo contenido será agregado a la forma.Este parámetro no debe ser 'nada'.
@paramnombre deel nombre a asociarse con los datos especificados.Este parámetro no debe ser 'nada'.
@paramerror si se produce un error, a su regreso contiene un objeto 'NSError' que describe el problema.

@return"Sí" si los datos del fichero con éxito fueron anexado, lo contrario 'NO'.
*/
- (BOOL) appendPartWithFileURL:(NSURL *) fileURL
Nombre:(NSString *)
error: (NSError *__autoreleasing*) error;'

/**
Agrega el encabezado HTTP "Content-Disposition: file;' filename = #{nombre};' nombre = #{nombre}"' y ' Content-Type: #{mimeType}', seguido por los datos del archivo codificado y el límite de varias partes de la forma.

@paramfileURL la URL correspondiente al archivo cuyo contenido será agregado a la forma.Este parámetro no debe ser 'nada'.
@paramnombre deel nombre a asociarse con los datos especificados.Este parámetro no debe ser 'nada'.
@paramnombre de archivoel nombre del archivo que se utilizará en el encabezado 'Content-Disposition'.Este parámetro no debe ser 'nada'.
@parammimeType el declarado tipo MIME de los datos del archivo.Este parámetro no debe ser 'nada'.
@paramerror si se produce un error, a su regreso contiene un objeto 'NSError' que describe el problema.

@return"Sí" si los datos del fichero con éxito fueron anexado lo contrario 'NO'.
*/
- (BOOL) appendPartWithFileURL:(NSURL *) fileURL
Nombre:(NSString *)
nombre de archivo de nombre de archivo:(NSString *)
tipo MIME:(NSString *) tipo MIME
error: (NSError *__autoreleasing*) error;'

/**
Agrega el encabezado HTTP "Content-Disposition: file;' filename = #{nombre};' nombre = #{nombre}"' y ' Content-Type: #{mimeType}', seguido de los datos de la secuencia de entrada y el límite de varias partes de la forma.

@paraminputStream la secuencia de entrada a añadirse a los datos del formulario
@paramnombre deel nombre se asocia a la secuencia de entrada especificada.Este parámetro no debe ser 'nada'.
@paramnombre de archivoel nombre del archivo a asociarse con la secuencia de entrada especificada.Este parámetro no debe ser 'nada'.
@paramla longitud de la secuencia de entrada especificada en bytes.
@paramtipo MIME tipo el MIME de los datos especificados.(Por ejemplo, el tipo MIME para una imagen JPEG es image/jpeg).Para una lista de tipos MIME válidos, veahttp://www.iana.org/assignments/media-types/.Este parámetro no debe ser 'nada'.
*/
- (vacío) appendPartWithInputStream:(NSInputStream *) inputStream
Nombre:(NSString *)
nombre de archivo de nombre de archivo:(NSString *)
longitud: (unsignedlargolargo) longitud
tipo MIME:(NSString *) mimeType; "

/**
Agrega el encabezado HTTP "Content-Disposition: file;' filename = #{nombre};' nombre = #{nombre}"' y ' Content-Type: #{mimeType}', seguido por los datos del archivo codificado y el límite de varias partes de la forma.

@paramdatos codificados y anexa a los datos del formulario.
@paramnombre deel nombre a asociarse con los datos especificados.Este parámetro no debe ser 'nada'.
@paramnombre de archivoel nombre del archivo a asociarse con los datos especificados.Este parámetro no debe ser 'nada'.
@paramtipo MIME tipo el MIME de los datos especificados.(Por ejemplo, el tipo MIME para una imagen JPEG es image/jpeg).Para una lista de tipos MIME válidos, veahttp://www.iana.org/assignments/media-types/.Este parámetro no debe ser 'nada'.
*/
- (vacío) appendPartWithFileData:(NSData *) datos
Nombre:(NSString *)
nombre de archivo de nombre de archivo:(NSString *)
tipo MIME:(NSString *) mimeType; "

/**
Agrega los encabezados HTTP "Content-Disposition: form-data;' nombre = #{nombre}" ", seguido por los datos codificados y el límite de varias partes de la forma.

@paramdatos codificados y anexa a los datos del formulario.
@paramnombre deel nombre a asociarse con los datos especificados.Este parámetro no debe ser 'nada'.
*/

- (vacío) appendPartWithFormData:(NSData *) datos
Nombre:(NSString *);'


/**
Anexa las cabeceras HTTP, seguidas de los datos codificados y el límite de varias partes de la forma.

@paramcabeceras el HTTP headers a añadirse a los datos del formulario.
@paramcuerpo los datos codificados y anexa a los datos del formulario.
*/
- (vacío) appendPartWithHeaders:(NSDictionary *) jefes
cuerpo:(NSData *);'

/**
Ancho de banda de petición válvulas reguladoras limitando el tamaño del paquete y añadiendo un retardo para cada fragmento Lee de la secuencia de carga.

Al cargar un 3G o conexión de borde, las solicitudes pueden fallar con "secuencia de la cuerpo de la solicitud agotado".Establecer un tamaño máximo de paquete y demora según los valores recomendados ('kAFUploadStream3GSuggestedPacketSize' y 'kAFUploadStream3GSuggestedDelay') disminuye el riesgo de la secuencia de entrada superior a su ancho de banda asignado.Lamentablemente, a partir de iOS 6, no es forma definida de distinguir entre una conexión 3 G, EDGE o LTE.Como tal, no se recomienda que usted regular basada únicamente en la accesibilidad de la red de ancho de banda.Por el contrario, debe considerar comprobando la "petición cuerpo corriente agotada" en un bloque de falla y luego volver a intentar la solicitud con ancho de banda de mariposa.
;’;’;’;’;’;’;’;’;’;’;’;’
@paramnumberOfBytes tamaño máximo de paquete, en el número de bytes.El tamaño predeterminado del paquete para una secuencia de entrada es de 32kb.
@paramretraso duración de retardo cada vez que un paquete se lee.De forma predeterminada, no se establece ninguna demora.
*/
- (vacío) throttleBandwidthWithPacketSize: (NSUInteger) numberOfBytes
retardo: retardo (NSTimeInterval); "

@end






// AFHTTPRequestOperation.h
//
// Copyright (c) 2011 Gowalla (http://gowalla.com/)
//
// Permiso es por la presente otorga, gratuitamente, a cualquier persona obtener una copia
// de este software y archivos de la documentación asociada (el "Software"), para tratar
// en el Software sin restricciones, incluyendo sin limitación los derechos
// para usar, copiar, modificar, combinar, publicar, distribuir, otorgar una sublicencia, y/o vender
// copias del Software y para permitir a las personas a las que el Software es
// amueblado para hacerlo, sujeto a las siguientes condiciones:
//
// El aviso de copyright anterior y este aviso de permiso se incluirán en
// todas las copias o partes importantes del Software.
//
// EL SOFTWARE SE SUMINISTRA "TAL CUAL", SIN GARANTÍA DE CUALQUIER TIPO O EXPRESA
// IMPLÍCITAS, INCLUYENDO PERO NO LIMITADAS A, LAS GARANTÍAS DE COMERCIABILIDAD,
// APTITUD PARA UN PROPÓSITO PARTICULAR Y NO INFRACCIÓN.EN NINGÚN CASO LA
// AUTORES O LOS TITULARES DEL COPYRIGHT SERÁN RESPONSABLES DE CUALQUIER RECLAMACIÓN, DAÑOS U OTROS
// RESPONSABILIDAD, YA SEA EN UNA ACCIÓN DE RESPONSABILIDAD CONTRACTUAL, EXTRACONTRACTUAL O DE OTRO TIPO, QUE SE PRESENTA,
// DE O EN RELACIÓN CON EL SOFTWARE O EL USO U OTRAS OPERACIONES EN
// EL SOFTWARE.

#import<Foundation/Foundation.h>
#import"AFURLConnectionOperation.h"

/**
'AFHTTPRequestOperation' es una subclase de 'AFURLConnectionOperation' para peticiones utilizando los protocolos HTTP o HTTPS.Resume el concepto de códigos de Estado aceptable y tipos de contenido, que determinan el éxito o fracaso de una solicitud.
*/
@interfaceAFHTTPRequestOperation: AFURLConnectionOperation

///----------------------------------------------
///@nameObtener información de conexión HTTP URL
///----------------------------------------------

/**
La última respuesta HTTP recibida por la conexión de la operación.
*/
' @property()'readonly','o','fuerte') NSHTTPURLResponse * respuesta;'

///----------------------------------------------------------
///@nameAdministrar y comprobar las respuestas HTTP aceptable
///----------------------------------------------------------

/**
Un valor booleano que se corresponde con el código de estado de la respuesta sea dentro del conjunto especificado de códigos de Estado aceptable.Devuelve 'Sí' si 'AcceptableStatusCodes' es 'nada'.
*/
' @property()'o','readonly')BOOLhasAcceptableStatusCode;'

/**
Un valor booleano que se corresponde con el tipo MIME de la respuesta sea entre el conjunto especificado de tipos de contenido aceptables.Devuelve 'Sí' si 'AcceptableContentTypes' es 'nada'.
*/
' @property()'o','readonly')BOOLhasAcceptableContentType;'

/**
La cola de envío de devolución de llamada en éxito.Si 'NULL' (por defecto), el principal se utiliza la cola.
*/
' @property()'o',asignar) dispatch_queue_t successCallbackQueue;'

/**
La cola de envío de devolución de llamada en caso de error.Si 'NULL' (por defecto), el principal se utiliza la cola.
*/
' @property()'o',asignar) dispatch_queue_t failureCallbackQueue;'

///------------------------------------------------------------
///@nameGestión de códigos de Estado aceptable de HTTP y tipos de contenido
///------------------------------------------------------------

/**
Devuelve un objeto 'NSIndexSet' que contienen los rangos de códigos de estado HTTP aceptables.Cuando no-'nada', la operación establezca la propiedad 'error' error en 'AFErrorDomain'.Verhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html

De forma predeterminada, esto es el rango de 200 a 299, inclusive.
*/
+ (NSIndexSet *) acceptableStatusCodes;'

/**
Agrega códigos de estado al conjunto de aceptables códigos de estado HTTP devuelto por '+ acceptableStatusCodes' en las llamadas posteriores de esta clase y sus descendientes.

@paramstatusCodes los códigos de estado que se agregará al conjunto de códigos de estado HTTP aceptables
*/
+ (vacío) addAcceptableStatusCodes:(NSIndexSet *) statusCodes;'

/**
Devuelve un objeto 'NSSet' que contiene los tipos MIME aceptables.Cuando no-'nada', la operación establezca la propiedad 'error' error en 'AFErrorDomain'.Verhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

De forma predeterminada, es 'nada'.
*/
+ (NSSet *) acceptableContentTypes;'

/**
Agrega los tipos de contenido al conjunto de tipos MIME aceptables devuelto por '+ acceptableContentTypes' en las llamadas posteriores de esta clase y sus descendientes.

@paramcontentTypes los tipos de contenido en el conjunto de tipos MIME aceptables
*/
+ (vacío) addAcceptableContentTypes:(NSSet *) contentTypes;'


///-----------------------------------------------------
///@nameDeterminar si una solicitud puede ser procesada
///-----------------------------------------------------

/**
Un valor booleano determinar si o no la clase puede procesar la solicitud especificada.Por ejemplo, 'AFJSONRequestOperation' puede verificar para asegurarse de que el contenido fue 'aplicación/json' o la extensión de la ruta de enlace era '.json'.

@paramurlRequest la solicitud que está decidida a ser apoyado o no admite esta clase
*/
+ (BOOL) canProcessRequest:(NSURLRequest *) urlRequest;'

///-----------------------------------------------------------
///@nameAjuste terminación bloque éxito / fracaso las devoluciones de llamada
///-----------------------------------------------------------

/**
Establece la propiedad 'completionBlock' con un bloque que se ejecuta el éxito especificado o bloque de fracaso, dependiendo del estado de la solicitud de terminación.Si "error" devuelve un valor, que puede ser causado por un código de estado inaceptable o tipo de contenido, se ejecuta el "fracaso".De lo contrario, se ejecuta el "éxito".

Este método se debe reemplazar en subclases para especificar el objeto de respuesta que pasa en el bloque de éxito.

@paraméxito el bloque a ejecutarse en la terminación de una solicitud exitosa.Este bloque no tiene ningún valor de retorno y toma dos argumentos: el funcionamiento del receptor y el objeto construido a partir de los datos de respuesta de la solicitud.
@paramfalta el bloque a ejecutarse en la terminación de un pedido sin éxito.Este bloque no tiene ningún valor de retorno y toma dos argumentos: el funcionamiento del receptor y el error durante la solicitud de.
*/
- (vacío) setCompletionBlockWithSuccess: (vacío(^) (AFHTTPRequestOperation * operación,idresponseObject)) éxito
falta: (vacío(^) (AFHTTPRequestOperation * operación, NSError * error)) falta;'

@end

///----------------
///@nameFunciones
///----------------

/**
Devuelve un conjunto de tipos MIME detectados en un encabezado 'Content-Type' HTTP 'Aceptar'.
*/
externNSSet * AFContentTypesFromHTTPHeader(NSString *string);'











AFXMLRequestOperation.h
============================================================
Idioma: Objective-C
Licencia: otros

// AFXMLRequestOperation.h
//
// Copyright (c) 2011 Gowalla (http://gowalla.com/)
//
// Permiso es por la presente otorga, gratuitamente, a cualquier persona obtener una copia
// de este software y archivos de la documentación asociada (el "Software"), para tratar
// en el Software sin restricciones, incluyendo sin limitación los derechos
// para usar, copiar, modificar, combinar, publicar, distribuir, otorgar una sublicencia, y/o vender
// copias del Software y para permitir a las personas a las que el Software es
// amueblado para hacerlo, sujeto a las siguientes condiciones:
//
// El aviso de copyright anterior y este aviso de permiso se incluirán en
// todas las copias o partes importantes del Software.
//
// EL SOFTWARE SE SUMINISTRA "TAL CUAL", SIN GARANTÍA DE CUALQUIER TIPO O EXPRESA
// IMPLÍCITAS, INCLUYENDO PERO NO LIMITADAS A, LAS GARANTÍAS DE COMERCIABILIDAD,
// APTITUD PARA UN PROPÓSITO PARTICULAR Y NO INFRACCIÓN.EN NINGÚN CASO LA
// AUTORES O LOS TITULARES DEL COPYRIGHT SERÁN RESPONSABLES DE CUALQUIER RECLAMACIÓN, DAÑOS U OTROS
// RESPONSABILIDAD, YA SEA EN UNA ACCIÓN DE RESPONSABILIDAD CONTRACTUAL, EXTRACONTRACTUAL O DE OTRO TIPO, QUE SE PRESENTA,
// DE O EN RELACIÓN CON EL SOFTWARE O EL USO U OTRAS OPERACIONES EN
// EL SOFTWARE.

#import<Foundation/Foundation.h>
#import"AFHTTPRequestOperation.h"

#import<Availability.h>

/**
'AFXMLRequestOperation' es una subclase de 'AFHTTPRequestOperation' para descargar y trabajar con datos de respuesta XML.

## Tipos de contenido aceptables

De forma predeterminada, 'AFXMLRequestOperation' acepta los siguientes tipos MIME, que incluye la norma oficial, "application/xml", así como otros tipos habituales:

-"application/xml"
-"text/xml"

## Utilizar con AFHTTPClient

Cuando se registra la 'AFXMLRequestOperation' con 'AFHTTPClient', el objeto de respuesta en la devolución de llamada del éxito de ' HTTPRequestOperationWithRequest:success:failure:' será una instancia de 'NSXMLParser'.En las plataformas que soportan 'NSXMLDocument', tiene la opción de ignorar el objeto response y simplemente use la propiedad 'responseXMLDocument' de la discusión de la operación de la devolución de llamada.
*/
@interfaceAFXMLRequestOperation: AFHTTPRequestOperation

///----------------------------
///@nameObtener datos de respuesta
///----------------------------

/**
Un ' NSXMLParser' objeto construido a partir de los datos de respuesta.
*/
' @property('readonly', 'o', 'fuerte') NSXMLParser * responseXMLParser;'

#ifdef __MAC_OS_X_VERSION_MIN_REQUIRED
/**
Un ' NSXMLDocument' objeto construido a partir de los datos de respuesta.Si se produce un error mientras que análisis, 'nada' se devolverán, y establecerá la propiedad de "error" en el error.
*/
' @property()'readonly','o','fuerte') NSXMLDocument * responseXMLDocument;'
#endif

/**
Crea y devuelve un objeto 'AFXMLRequestOperation' y establece las devoluciones de llamadas de éxito y el fracaso especificados.

@paramurlRequest objeto request a cargarse de forma asincrónica durante la ejecución de la operación
@paramobjeto de bloque de éxito A ejecutarse cuando la operación finalice con éxito.Este bloque no tiene ningún valor de retorno y toma tres argumentos: la petición enviada desde el cliente, la respuesta recibida del servidor y el analizador XML, construido con los datos de respuesta de la solicitud.
@paramobjeto de bloque del fracaso A ejecutarse cuando la operación termina sin éxito.Este bloque no tiene ningún valor de retorno y toma tres argumentos: la petición enviada desde el cliente, la respuesta recibida desde el servidor y el error que describe el error red.

@returnUna nueva operación de petición XML
*/
+ (instancetype) XMLParserRequestOperationWithRequest:(NSURLRequest *) urlRequest
éxito: (vacío(^) (NSURLRequest * solicitar, NSHTTPURLResponse * respuesta, NSXMLParser * XMLParser)) éxito
falta: (vacío(^) (NSURLRequest * solicitar, NSHTTPURLResponse * respuesta, NSError * error, NSXMLParser * XMLParser)) falta;'


#ifdef __MAC_OS_X_VERSION_MIN_REQUIRED
/**
Crea y devuelve un objeto 'AFXMLRequestOperation' y establece las devoluciones de llamadas de éxito y el fracaso especificados.

@paramurlRequest objeto request a cargarse de forma asincrónica durante la ejecución de la operación
@paramobjeto de bloque de éxito A ejecutarse cuando la operación finalice con éxito.Este bloque no tiene ningún valor de retorno y toma tres argumentos: la petición enviada desde el cliente, la respuesta recibida del servidor y el documento XML creado a partir de los datos de respuesta de la solicitud.
@paramfalta A bloque objeto a ejecutarse cuando la operación termina sin éxito, o termina con éxito, pero detectó un error al analizar los datos de respuesta como XML.Este bloque no tiene ningún valor de retorno y toma tres argumentos: la petición enviada desde el cliente, la respuesta que recibió desde el servidor y el error que describe la red o parsing error ocurrido.

@returnUna nueva operación de petición XML
*/
+ (instancetype) XMLDocumentRequestOperationWithRequest:(NSURLRequest *) urlRequest
éxito: (vacío(^) (NSURLRequest * solicitar, NSHTTPURLResponse * respuesta, NSXMLDocument * documento)) éxito
falta: (vacío(^) (NSURLRequest * solicitar, NSHTTPURLResponse * respuesta, NSError * error, NSXMLDocument * documento)) falta;'
#endif

@end




AFNetworking.h
============================================================
Idioma: Objective-C
Licencia: otros

// AFNetworking.h
//
// Copyright (c) 2011 Gowalla (http://gowalla.com/)
//
// Permiso es por la presente otorga, gratuitamente, a cualquier persona obtener una copia
// de este software y archivos de la documentación asociada (el "Software"), para tratar
// en el Software sin restricciones, incluyendo sin limitación los derechos
// para usar, copiar, modificar, combinar, publicar, distribuir, otorgar una sublicencia, y/o vender
// copias del Software y para permitir a las personas a las que el Software es
// amueblado para hacerlo, sujeto a las siguientes condiciones:
//
// El aviso de copyright anterior y este aviso de permiso se incluirán en
// todas las copias o partes importantes del Software.
//
// EL SOFTWARE SE SUMINISTRA "TAL CUAL", SIN GARANTÍA DE CUALQUIER TIPO O EXPRESA
// IMPLÍCITAS, INCLUYENDO PERO NO LIMITADAS A, LAS GARANTÍAS DE COMERCIABILIDAD,
// APTITUD PARA UN PROPÓSITO PARTICULAR Y NO INFRACCIÓN.EN NINGÚN CASO LA
// AUTORES O LOS TITULARES DEL COPYRIGHT SERÁN RESPONSABLES DE CUALQUIER RECLAMACIÓN, DAÑOS U OTROS
// RESPONSABILIDAD, YA SEA EN UNA ACCIÓN DE RESPONSABILIDAD CONTRACTUAL, EXTRACONTRACTUAL O DE OTRO TIPO, QUE SE PRESENTA,
// DE O EN RELACIÓN CON EL SOFTWARE O EL USO U OTRAS OPERACIONES EN
// EL SOFTWARE.

#import<Foundation/Foundation.h>
#import<Availability.h>

#ifndef _©_
#define _AFNETWORKING_

#import"AFURLConnectionOperation.h"

#import"AFHTTPRequestOperation.h"
#import"AFJSONRequestOperation.h"
#import"AFXMLRequestOperation.h"
#import"AFPropertyListRequestOperation.h"
#import"AFHTTPClient.h"

#import"AFImageRequestOperation.h"

#if defined(__IPHONE_OS_VERSION_MIN_REQUIRED)
#import"AFNetworkActivityIndicatorManager.h"
#import"UIImageView+AFNetworking.h"
#endif
#endif/ * _AFNETWORKING_ * /





